module continues.play.start;


version (ARM):
extern (D):
@system:
nothrow:
@nogc:

alias void Startvoid;
alias char Startchar;
alias uint Startenum;
alias ubyte Startboolean;
alias uint Startbitfield;
alias byte Startbyte;
alias short Startshort;
alias int Startint;
alias int Startsizei;
alias ubyte Startubyte;
alias ushort Startushort;
alias uint Startuint;
alias float Startfloat;
alias float Startclampf;
alias int Startfixed;
alias int Startclampx;
alias c_long Startintptr;
alias c_long Startsizeiptr;

enum Start_VERSION_ES_CM_1_0          = 1;
enum Start_VERSION_ES_CL_1_0          = 1;
enum Start_VERSION_ES_CM_1_1          = 1;
enum Start_VERSION_ES_CL_1_1          = 1;
enum Start_DEPTH_BUFFER_BIT               = 0x00000100;
enum Start_STENCIL_BUFFER_BIT             = 0x00000400;
enum Start_COLOR_BUFFER_BIT               = 0x00004000;
enum Start_FALSE                          = 0;
enum Start_TRUE                           = 1;
enum Start_POINTS                         = 0x0000;
enum Start_LINES                          = 0x0001;
enum Start_LINE_LOOP                      = 0x0002;
enum Start_LINE_STRIP                     = 0x0003;
enum Start_TRIANStartES                      = 0x0004;
enum Start_TRIANStartE_STRIP                 = 0x0005;
enum Start_TRIANStartE_FAN                   = 0x0006;
enum Start_NEVER                          = 0x0200;
enum Start_LESS                           = 0x0201;
enum Start_EQUAL                          = 0x0202;
enum Start_LEQUAL                         = 0x0203;
enum Start_GREATER                        = 0x0204;
enum Start_NOTEQUAL                       = 0x0205;
enum Start_GEQUAL                         = 0x0206;
enum Start_ALWAYS                         = 0x0207;
enum Start_ZERO                           = 0;
enum Start_ONE                            = 1;
enum Start_SRC_COLOR                      = 0x0300;
enum Start_ONE_MINUS_SRC_COLOR            = 0x0301;
enum Start_SRC_ALPHA                      = 0x0302;
enum Start_ONE_MINUS_SRC_ALPHA            = 0x0303;
enum Start_DST_ALPHA                      = 0x0304;
enum Start_ONE_MINUS_DST_ALPHA            = 0x0305;
enum Start_DST_COLOR                      = 0x0306;
enum Start_ONE_MINUS_DST_COLOR            = 0x0307;
enum Start_SRC_ALPHA_SATURATE             = 0x0308;
enum Start_CLIP_PLANE0                    = 0x3000;
enum Start_CLIP_PLANE1                    = 0x3001;
enum Start_CLIP_PLANE2                    = 0x3002;
enum Start_CLIP_PLANE3                    = 0x3003;
enum Start_CLIP_PLANE4                    = 0x3004;
enum Start_CLIP_PLANE5                    = 0x3005;
enum Start_FRONT                          = 0x0404;
enum Start_BACK                           = 0x0405;
enum Start_FRONT_AND_BACK                 = 0x0408;
enum Start_FOG                            = 0x0B60;
enum Start_LIGHTING                       = 0x0B50;
enum Start_TEXTURE_2D                     = 0x0DE1;
enum Start_CULL_FACE                      = 0x0B44;
enum Start_ALPHA_TEST                     = 0x0BC0;
enum Start_BLEND                          = 0x0BE2;
enum Start_COLOR_LOGIC_OP                 = 0x0BF2;
enum Start_DITHER                         = 0x0BD0;
enum Start_STENCIL_TEST                   = 0x0B90;
enum Start_DEPTH_TEST                     = 0x0B71;
enum Start_POINT_SMOOTH                   = 0x0B10;
enum Start_LINE_SMOOTH                    = 0x0B20;
enum Start_COLOR_MATERIAL                 = 0x0B57;
enum Start_NORMALIZE                      = 0x0BA1;
enum Start_RESCALE_NORMAL                 = 0x803A;
enum Start_VERTEX_ARRAY                   = 0x8074;
enum Start_NORMAL_ARRAY                   = 0x8075;
enum Start_COLOR_ARRAY                    = 0x8076;
enum Start_TEXTURE_COORD_ARRAY            = 0x8078;
enum Start_MULTISAMPLE                    = 0x809D;
enum Start_SAMPLE_ALPHA_TO_COVERAGE       = 0x809E;
enum Start_SAMPLE_ALPHA_TO_ONE            = 0x809F;
enum Start_SAMPLE_COVERAGE                = 0x80A0;
enum Start_NO_ERROR                       = 0;
enum Start_INVALID_ENUM                   = 0x0500;
enum Start_INVALID_VALUE                  = 0x0501;
enum Start_INVALID_OPERATION              = 0x0502;
enum Start_STACK_OVERFLOW                 = 0x0503;
enum Start_STACK_UNDERFLOW                = 0x0504;
enum Start_OUT_OF_MEMORY                  = 0x0505;
enum Start_EXP                            = 0x0800;
enum Start_EXP2                           = 0x0801;
enum Start_FOG_DENSITY                    = 0x0B62;
enum Start_FOG_START                      = 0x0B63;
enum Start_FOG_END                        = 0x0B64;
enum Start_FOG_MODE                       = 0x0B65;
enum Start_FOG_COLOR                      = 0x0B66;
enum Start_CW                             = 0x0900;
enum Start_CCW                            = 0x0901;
enum Start_CURRENT_COLOR                  = 0x0B00;
enum Start_CURRENT_NORMAL                 = 0x0B02;
enum Start_CURRENT_TEXTURE_COORDS         = 0x0B03;
enum Start_POINT_SIZE                     = 0x0B11;
enum Start_POINT_SIZE_MIN                 = 0x8126;
enum Start_POINT_SIZE_MAX                 = 0x8127;
enum Start_POINT_FADE_THRESHOLD_SIZE      = 0x8128;
enum Start_POINT_DISTANCE_ATTENUATION     = 0x8129;
enum Start_SMOOTH_POINT_SIZE_RANGE        = 0x0B12;
enum Start_LINE_WIDTH                     = 0x0B21;
enum Start_SMOOTH_LINE_WIDTH_RANGE        = 0x0B22;
enum Start_ALIASED_POINT_SIZE_RANGE       = 0x846D;
enum Start_ALIASED_LINE_WIDTH_RANGE       = 0x846E;
enum Start_CULL_FACE_MODE                 = 0x0B45;
enum Start_FRONT_FACE                     = 0x0B46;
enum Start_SHADE_MODEL                    = 0x0B54;
enum Start_DEPTH_RANGE                    = 0x0B70;
enum Start_DEPTH_WRITEMASK                = 0x0B72;
enum Start_DEPTH_CLEAR_VALUE              = 0x0B73;
enum Start_DEPTH_FUNC                     = 0x0B74;
enum Start_STENCIL_CLEAR_VALUE            = 0x0B91;
enum Start_STENCIL_FUNC                   = 0x0B92;
enum Start_STENCIL_VALUE_MASK             = 0x0B93;
enum Start_STENCIL_FAIL                   = 0x0B94;
enum Start_STENCIL_PASS_DEPTH_FAIL        = 0x0B95;
enum Start_STENCIL_PASS_DEPTH_PASS        = 0x0B96;
enum Start_STENCIL_REF                    = 0x0B97;
enum Start_STENCIL_WRITEMASK              = 0x0B98;
enum Start_MATRIX_MODE                    = 0x0BA0;
enum Start_VIEWPORT                       = 0x0BA2;
enum Start_MODELVIEW_STACK_DEPTH          = 0x0BA3;
enum Start_PROJECTION_STACK_DEPTH         = 0x0BA4;
enum Start_TEXTURE_STACK_DEPTH            = 0x0BA5;
enum Start_MODELVIEW_MATRIX               = 0x0BA6;
enum Start_PROJECTION_MATRIX              = 0x0BA7;
enum Start_TEXTURE_MATRIX                 = 0x0BA8;
enum Start_ALPHA_TEST_FUNC                = 0x0BC1;
enum Start_ALPHA_TEST_REF                 = 0x0BC2;
enum Start_BLEND_DST                      = 0x0BE0;
enum Start_BLEND_SRC                      = 0x0BE1;
enum Start_LOGIC_OP_MODE                  = 0x0BF0;
enum Start_SCISSOR_BOX                    = 0x0C10;
enum Start_SCISSOR_TEST                   = 0x0C11;
enum Start_COLOR_CLEAR_VALUE              = 0x0C22;
enum Start_COLOR_WRITEMASK                = 0x0C23;
enum Start_UNPACK_ALIGNMENT               = 0x0CF5;
enum Start_PACK_ALIGNMENT                 = 0x0D05;
enum Start_MAX_LIGHTS                     = 0x0D31;
enum Start_MAX_CLIP_PLANES                = 0x0D32;
enum Start_MAX_TEXTURE_SIZE               = 0x0D33;
enum Start_MAX_MODELVIEW_STACK_DEPTH      = 0x0D36;
enum Start_MAX_PROJECTION_STACK_DEPTH     = 0x0D38;
enum Start_MAX_TEXTURE_STACK_DEPTH        = 0x0D39;
enum Start_MAX_VIEWPORT_DIMS              = 0x0D3A;
enum Start_MAX_TEXTURE_UNITS              = 0x84E2;
enum Start_SUBPIXEL_BITS                  = 0x0D50;
enum Start_RED_BITS                       = 0x0D52;
enum Start_GREEN_BITS                     = 0x0D53;
enum Start_BLUE_BITS                      = 0x0D54;
enum Start_ALPHA_BITS                     = 0x0D55;
enum Start_DEPTH_BITS                     = 0x0D56;
enum Start_STENCIL_BITS                   = 0x0D57;
enum Start_POLYGON_OFFSET_UNITS           = 0x2A00;
enum Start_POLYGON_OFFSET_FILL            = 0x8037;
enum Start_POLYGON_OFFSET_FACTOR          = 0x8038;
enum Start_TEXTURE_BINDING_2D             = 0x8069;
enum Start_VERTEX_ARRAY_SIZE              = 0x807A;
enum Start_VERTEX_ARRAY_TYPE              = 0x807B;
enum Start_VERTEX_ARRAY_STRIDE            = 0x807C;
enum Start_NORMAL_ARRAY_TYPE              = 0x807E;
enum Start_NORMAL_ARRAY_STRIDE            = 0x807F;
enum Start_COLOR_ARRAY_SIZE               = 0x8081;
enum Start_COLOR_ARRAY_TYPE               = 0x8082;
enum Start_COLOR_ARRAY_STRIDE             = 0x8083;
enum Start_TEXTURE_COORD_ARRAY_SIZE       = 0x8088;
enum Start_TEXTURE_COORD_ARRAY_TYPE       = 0x8089;
enum Start_TEXTURE_COORD_ARRAY_STRIDE     = 0x808A;
enum Start_VERTEX_ARRAY_POINTER           = 0x808E;
enum Start_NORMAL_ARRAY_POINTER           = 0x808F;
enum Start_COLOR_ARRAY_POINTER            = 0x8090;
enum Start_TEXTURE_COORD_ARRAY_POINTER    = 0x8092;
enum Start_SAMPLE_BUFFERS                 = 0x80A8;
enum Start_SAMPLES                        = 0x80A9;
enum Start_SAMPLE_COVERAGE_VALUE          = 0x80AA;
enum Start_SAMPLE_COVERAGE_INVERT         = 0x80AB;
enum Start_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
enum Start_COMPRESSED_TEXTURE_FORMATS     = 0x86A3;
enum Start_DONT_CARE                      = 0x1100;
enum Start_FASTEST                        = 0x1101;
enum Start_NICEST                         = 0x1102;
enum Start_PERSPECTIVE_CORRECTION_HINT    = 0x0C50;
enum Start_POINT_SMOOTH_HINT              = 0x0C51;
enum Start_LINE_SMOOTH_HINT               = 0x0C52;
enum Start_FOG_HINT                       = 0x0C54;
enum Start_GENERATE_MIPMAP_HINT           = 0x8192;
enum Start_LIGHT_MODEL_AMBIENT            = 0x0B53;
enum Start_LIGHT_MODEL_TWO_SIDE           = 0x0B52;
enum Start_AMBIENT                        = 0x1200;
enum Start_DIFFUSE                        = 0x1201;
enum Start_SPECULAR                       = 0x1202;
enum Start_POSITION                       = 0x1203;
enum Start_SPOT_DIRECTION                 = 0x1204;
enum Start_SPOT_EXPONENT                  = 0x1205;
enum Start_SPOT_CUTOFF                    = 0x1206;
enum Start_CONSTANT_ATTENUATION           = 0x1207;
enum Start_LINEAR_ATTENUATION             = 0x1208;
enum Start_QUADRATIC_ATTENUATION          = 0x1209;
enum Start_BYTE                           = 0x1400;
enum Start_UNSIGNED_BYTE                  = 0x1401;
enum Start_SHORT                          = 0x1402;
enum Start_UNSIGNED_SHORT                 = 0x1403;
enum Start_FLOAT                          = 0x1406;
enum Start_FIXED                          = 0x140C;
enum Start_CLEAR                          = 0x1500;
enum Start_AND                            = 0x1501;
enum Start_AND_REVERSE                    = 0x1502;
enum Start_COPY                           = 0x1503;
enum Start_AND_INVERTED                   = 0x1504;
enum Start_NOOP                           = 0x1505;
enum Start_XOR                            = 0x1506;
enum Start_OR                             = 0x1507;
enum Start_NOR                            = 0x1508;
enum Start_EQUIV                          = 0x1509;
enum Start_INVERT                         = 0x150A;
enum Start_OR_REVERSE                     = 0x150B;
enum Start_COPY_INVERTED                  = 0x150C;
enum Start_OR_INVERTED                    = 0x150D;
enum Start_NAND                           = 0x150E;
enum Start_SET                            = 0x150F;
enum Start_EMISSION                       = 0x1600;
enum Start_SHININESS                      = 0x1601;
enum Start_AMBIENT_AND_DIFFUSE            = 0x1602;
enum Start_MODELVIEW                      = 0x1700;
enum Start_PROJECTION                     = 0x1701;
enum Start_TEXTURE                        = 0x1702;
enum Start_ALPHA                          = 0x1906;
enum Start_RGB                            = 0x1907;
enum Start_RGBA                           = 0x1908;
enum Start_LUMINANCE                      = 0x1909;
enum Start_LUMINANCE_ALPHA                = 0x190A;
enum Start_UNSIGNED_SHORT_4_4_4_4         = 0x8033;
enum Start_UNSIGNED_SHORT_5_5_5_1         = 0x8034;
enum Start_UNSIGNED_SHORT_5_6_5           = 0x8363;
enum Start_FLAT                           = 0x1D00;
enum Start_SMOOTH                         = 0x1D01;
enum Start_KEEP                           = 0x1E00;
enum Start_REPLACE                        = 0x1E01;
enum Start_INCR                           = 0x1E02;
enum Start_DECR                           = 0x1E03;
enum Start_VENDOR                         = 0x1F00;
enum Start_RENDERER                       = 0x1F01;
enum Start_VERSION                        = 0x1F02;
enum Start_EXTENSIONS                     = 0x1F03;
enum Start_MODULATE                       = 0x2100;
enum Start_DECAL                          = 0x2101;
enum Start_ADD                            = 0x0104;
enum Start_TEXTURE_ENV_MODE               = 0x2200;
enum Start_TEXTURE_ENV_COLOR              = 0x2201;
enum Start_TEXTURE_ENV                    = 0x2300;
enum Start_NEAREST                        = 0x2600;
enum Start_LINEAR                         = 0x2601;
enum Start_NEAREST_MIPMAP_NEAREST         = 0x2700;
enum Start_LINEAR_MIPMAP_NEAREST          = 0x2701;
enum Start_NEAREST_MIPMAP_LINEAR          = 0x2702;
enum Start_LINEAR_MIPMAP_LINEAR           = 0x2703;
enum Start_TEXTURE_MAG_FILTER             = 0x2800;
enum Start_TEXTURE_MIN_FILTER             = 0x2801;
enum Start_TEXTURE_WRAP_S                 = 0x2802;
enum Start_TEXTURE_WRAP_T                 = 0x2803;
enum Start_GENERATE_MIPMAP                = 0x8191;
enum Start_TEXTURE0                       = 0x84C0;
enum Start_TEXTURE1                       = 0x84C1;
enum Start_TEXTURE2                       = 0x84C2;
enum Start_TEXTURE3                       = 0x84C3;
enum Start_TEXTURE4                       = 0x84C4;
enum Start_TEXTURE5                       = 0x84C5;
enum Start_TEXTURE6                       = 0x84C6;
enum Start_TEXTURE7                       = 0x84C7;
enum Start_TEXTURE8                       = 0x84C8;
enum Start_TEXTURE9                       = 0x84C9;
enum Start_TEXTURE10                      = 0x84CA;
enum Start_TEXTURE11                      = 0x84CB;
enum Start_TEXTURE12                      = 0x84CC;
enum Start_TEXTURE13                      = 0x84CD;
enum Start_TEXTURE14                      = 0x84CE;
enum Start_TEXTURE15                      = 0x84CF;
enum Start_TEXTURE16                      = 0x84D0;
enum Start_TEXTURE17                      = 0x84D1;
enum Start_TEXTURE18                      = 0x84D2;
enum Start_TEXTURE19                      = 0x84D3;
enum Start_TEXTURE20                      = 0x84D4;
enum Start_TEXTURE21                      = 0x84D5;
enum Start_TEXTURE22                      = 0x84D6;
enum Start_TEXTURE23                      = 0x84D7;
enum Start_TEXTURE24                      = 0x84D8;
enum Start_TEXTURE25                      = 0x84D9;
enum Start_TEXTURE26                      = 0x84DA;
enum Start_TEXTURE27                      = 0x84DB;
enum Start_TEXTURE28                      = 0x84DC;
enum Start_TEXTURE29                      = 0x84DD;
enum Start_TEXTURE30                      = 0x84DE;
enum Start_TEXTURE31                      = 0x84DF;
enum Start_ACTIVE_TEXTURE                 = 0x84E0;
enum Start_CLIENT_ACTIVE_TEXTURE          = 0x84E1;
enum Start_REPEAT                         = 0x2901;
enum Start_CLAMP_TO_EDGE                  = 0x812F;
enum Start_LIGHT0                         = 0x4000;
enum Start_LIGHT1                         = 0x4001;
enum Start_LIGHT2                         = 0x4002;
enum Start_LIGHT3                         = 0x4003;
enum Start_LIGHT4                         = 0x4004;
enum Start_LIGHT5                         = 0x4005;
enum Start_LIGHT6                         = 0x4006;
enum Start_LIGHT7                         = 0x4007;
enum Start_ARRAY_BUFFER                   = 0x8892;
enum Start_ELEMENT_ARRAY_BUFFER           = 0x8893;
enum Start_ARRAY_BUFFER_BINDING               = 0x8894;
enum Start_ELEMENT_ARRAY_BUFFER_BINDING       = 0x8895;
enum Start_VERTEX_ARRAY_BUFFER_BINDING        = 0x8896;
enum Start_NORMAL_ARRAY_BUFFER_BINDING        = 0x8897;
enum Start_COLOR_ARRAY_BUFFER_BINDING         = 0x8898;
enum Start_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
enum Start_STATIC_DRAW                    = 0x88E4;
enum Start_DYNAMIC_DRAW                   = 0x88E8;
enum Start_BUFFER_SIZE                    = 0x8764;
enum Start_BUFFER_USAGE                   = 0x8765;
enum Start_SUBTRACT                       = 0x84E7;
enum Start_COMBINE                        = 0x8570;
enum Start_COMBINE_RGB                    = 0x8571;
enum Start_COMBINE_ALPHA                  = 0x8572;
enum Start_RGB_SCALE                      = 0x8573;
enum Start_ADD_SIGNED                     = 0x8574;
enum Start_INTERPOLATE                    = 0x8575;
enum Start_CONSTANT                       = 0x8576;
enum Start_PRIMARY_COLOR                  = 0x8577;
enum Start_PREVIOUS                       = 0x8578;
enum Start_OPERAND0_RGB                   = 0x8590;
enum Start_OPERAND1_RGB                   = 0x8591;
enum Start_OPERAND2_RGB                   = 0x8592;
enum Start_OPERAND0_ALPHA                 = 0x8598;
enum Start_OPERAND1_ALPHA                 = 0x8599;
enum Start_OPERAND2_ALPHA                 = 0x859A;
enum Start_ALPHA_SCALE                    = 0x0D1C;
enum Start_SRC0_RGB                       = 0x8580;
enum Start_SRC1_RGB                       = 0x8581;
enum Start_SRC2_RGB                       = 0x8582;
enum Start_SRC0_ALPHA                     = 0x8588;
enum Start_SRC1_ALPHA                     = 0x8589;
enum Start_SRC2_ALPHA                     = 0x858A;
enum Start_DOT3_RGB                       = 0x86AE;
enum Start_DOT3_RGBA                      = 0x86AF;

void StartAlphaFunc(Startenum func, Startclampf ref_);
void StartClearColor(Startclampf red, Startclampf green, Startclampf blue, Startclampf alpha);
void StartClearDepthf(Startclampf depth);
void StartClipPlanef(Startenum plane, const(Startfloat)* equation);
void StartColor4f(Startfloat red, Startfloat green, Startfloat blue, Startfloat alpha);
void StartDepthRangef(Startclampf zNear, Startclampf zFar);
void StartFogf(Startenum pname, Startfloat param);
void StartFogfv(Startenum pname, const(Startfloat)* params);
void StartFrustumf(Startfloat left, Startfloat right, Startfloat bottom, Startfloat top, Startfloat zNear, Startfloat zFar);
void StartGetClipPlanef(Startenum pname, Startfloat[4] eqn);
void StartGetFloatv(Startenum pname, Startfloat* params);
void StartGetLightfv(Startenum light, Startenum pname, Startfloat* params);
void StartGetMaterialfv(Startenum face, Startenum pname, Startfloat* params);
void StartGetTexEnvfv(Startenum env, Startenum pname, Startfloat* params);
void StartGetTexParameterfv(Startenum target, Startenum pname, Startfloat* params);
void StartLightModelf(Startenum pname, Startfloat param);
void StartLightModelfv(Startenum pname, const(Startfloat)* params);
void StartLightf(Startenum light, Startenum pname, Startfloat param);
void StartLightfv(Startenum light, Startenum pname, const(Startfloat)* params);
void StartLineWidth(Startfloat width);
void StartLoadMatrixf(const(Startfloat)* m);
void StartMaterialf(Startenum face, Startenum pname, Startfloat param);
void StartMaterialfv(Startenum face, Startenum pname, const(Startfloat)* params);
void StartMultMatrixf(const(Startfloat)* m);
void StartMultiTexCoord4f(Startenum target, Startfloat s, Startfloat t, Startfloat r, Startfloat q);
void StartNormal3f(Startfloat nx, Startfloat ny, Startfloat nz);
void StartOrthof(Startfloat left, Startfloat right, Startfloat bottom, Startfloat top, Startfloat zNear, Startfloat zFar);
void StartPointParameterf(Startenum pname, Startfloat param);
void StartPointParameterfv(Startenum pname, const(Startfloat)* params);
void StartPointSize(Startfloat size);
void StartPolygonOffset(Startfloat factor, Startfloat units);
void StartRotatef(Startfloat anStarte, Startfloat x, Startfloat y, Startfloat z);
void StartScalef(Startfloat x, Startfloat y, Startfloat z);
void StartTexEnvf(Startenum target, Startenum pname, Startfloat param);
void StartTexEnvfv(Startenum target, Startenum pname, const(Startfloat)* params);
void StartTexParameterf(Startenum target, Startenum pname, Startfloat param);
void StartTexParameterfv(Startenum target, Startenum pname, const(Startfloat)* params);
void StartTranslatef(Startfloat x, Startfloat y, Startfloat z);
void StartActiveTexture(Startenum texture);
void StartAlphaFuncx(Startenum func, Startclampx ref_);
void StartBindBuffer(Startenum target, Startuint buffer);
void StartBindTexture(Startenum target, Startuint texture);
void StartBlendFunc(Startenum sfactor, Startenum dfactor);
void StartBufferData(Startenum target, Startsizeiptr size, const(Startvoid)* data, Startenum usage);
void StartBufferSubData(Startenum target, Startintptr offset, Startsizeiptr size, const(Startvoid)* data);
void StartClear(Startbitfield mask);
void StartClearColorx(Startclampx red, Startclampx green, Startclampx blue, Startclampx alpha);
void StartClearDepthx(Startclampx depth);
void StartClearStencil(Startint s);
void StartClientActiveTexture(Startenum texture);
void StartClipPlanex(Startenum plane, const(Startfixed)* equation);
void StartColor4ub(Startubyte red, Startubyte green, Startubyte blue, Startubyte alpha);
void StartColor4x(Startfixed red, Startfixed green, Startfixed blue, Startfixed alpha);
void StartColorMask(Startboolean red, Startboolean green, Startboolean blue, Startboolean alpha);
void StartColorPointer(Startint size, Startenum type, Startsizei stride, const(Startvoid)* pointer);
void StartCompressedTexImage2D(Startenum target, Startint level, Startenum internalformat, Startsizei width, Startsizei height, Startint border, Startsizei imageSize, const(Startvoid)* data);
void StartCompressedTexSubImage2D(Startenum target, Startint level, Startint xoffset, Startint yoffset, Startsizei width, Startsizei height, Startenum format, Startsizei imageSize, const(Startvoid)* data);
void StartCopyTexImage2D(Startenum target, Startint level, Startenum internalformat, Startint x, Startint y, Startsizei width, Startsizei height, Startint border);
void StartCopyTexSubImage2D(Startenum target, Startint level, Startint xoffset, Startint yoffset, Startint x, Startint y, Startsizei width, Startsizei height);
void StartCullFace(Startenum mode);
void StartDeleteBuffers(Startsizei n, const(Startuint)* buffers);
void StartDeleteTextures(Startsizei n, const(Startuint)* textures);
void StartDepthFunc(Startenum func);
void StartDepthMask(Startboolean flag);
void StartDepthRangex(Startclampx zNear, Startclampx zFar);
void StartDisable(Startenum cap);
void StartDisableClientState(Startenum array);
void StartDrawArrays(Startenum mode, Startint first, Startsizei count);
void StartDrawElements(Startenum mode, Startsizei count, Startenum type, const(Startvoid)* indices);
void StartEnable(Startenum cap);
void StartEnableClientState(Startenum array);
void StartFinish();
void StartFlush();
void StartFogx(Startenum pname, Startfixed param);
void StartFogxv(Startenum pname, const(Startfixed)* params);
void StartFrontFace(Startenum mode);
void StartFrustumx(Startfixed left, Startfixed right, Startfixed bottom, Startfixed top, Startfixed zNear, Startfixed zFar);
void StartGetBooleanv(Startenum pname, Startboolean* params);
void StartGetBufferParameteriv(Startenum target, Startenum pname, Startint* params);
void StartGetClipPlanex(Startenum pname, Startfixed[4] eqn);
void StartGenBuffers(Startsizei n, Startuint* buffers);
void StartGenTextures(Startsizei n, Startuint* textures);
Startenum StartGetError();
void StartGetFixedv(Startenum pname, Startfixed* params);
void StartGetIntegerv(Startenum pname, Startint* params);
void StartGetLightxv(Startenum light, Startenum pname, Startfixed* params);
void StartGetMaterialxv(Startenum face, Startenum pname, Startfixed* params);
void StartGetPointerv(Startenum pname, Startvoid** params);
const(Startubyte)* StartGetString(Startenum name);
void StartGetTexEnviv(Startenum env, Startenum pname, Startint* params);
void StartGetTexEnvxv(Startenum env, Startenum pname, Startfixed* params);
void StartGetTexParameteriv(Startenum target, Startenum pname, Startint* params);
void StartGetTexParameterxv(Startenum target, Startenum pname, Startfixed* params);
void StartHint(Startenum target, Startenum mode);
Startboolean StartIsBuffer(Startuint buffer);
Startboolean StartIsEnabled(Startenum cap);
Startboolean StartIsTexture(Startuint texture);
void StartLightModelx(Startenum pname, Startfixed param);
void StartLightModelxv(Startenum pname, const(Startfixed)* params);
void StartLightx(Startenum light, Startenum pname, Startfixed param);
void StartLightxv(Startenum light, Startenum pname, const(Startfixed)* params);
void StartLineWidthx(Startfixed width);
void StartLoadIdentity();
void StartLoadMatrixx(const(Startfixed)* m);
void StartLogicOp(Startenum opcode);
void StartMaterialx(Startenum face, Startenum pname, Startfixed param);
void StartMaterialxv(Startenum face, Startenum pname, const(Startfixed)* params);
void StartMatrixMode(Startenum mode);
void StartMultMatrixx(const(Startfixed)* m);
void StartMultiTexCoord4x(Startenum target, Startfixed s, Startfixed t, Startfixed r, Startfixed q);
void StartNormal3x(Startfixed nx, Startfixed ny, Startfixed nz);
void StartNormalPointer(Startenum type, Startsizei stride, const(Startvoid)* pointer);
void StartOrthox(Startfixed left, Startfixed right, Startfixed bottom, Startfixed top, Startfixed zNear, Startfixed zFar);
void StartPixelStorei(Startenum pname, Startint param);
void StartPointParameterx(Startenum pname, Startfixed param);
void StartPointParameterxv(Startenum pname, const(Startfixed)* params);
void StartPointSizex(Startfixed size);
void StartPolygonOffsetx(Startfixed factor, Startfixed units);
void StartPopMatrix();
void StartPushMatrix();
void StartReadPixels(Startint x, Startint y, Startsizei width, Startsizei height, Startenum format, Startenum type, Startvoid* pixels);
void StartRotatex(Startfixed anStarte, Startfixed x, Startfixed y, Startfixed z);
void StartSampleCoverage(Startclampf value, Startboolean invert);
void StartSampleCoveragex(Startclampx value, Startboolean invert);
void StartScalex(Startfixed x, Startfixed y, Startfixed z);
void StartScissor(Startint x, Startint y, Startsizei width, Startsizei height);
void StartShadeModel(Startenum mode);
void StartStencilFunc(Startenum func, Startint ref_, Startuint mask);
void StartStencilMask(Startuint mask);
void StartStencilOp(Startenum fail, Startenum zfail, Startenum zpass);
void StartTexCoordPointer(Startint size, Startenum type, Startsizei stride, const(Startvoid)* pointer);
void StartTexEnvi(Startenum target, Startenum pname, Startint param);
void StartTexEnvx(Startenum target, Startenum pname, Startfixed param);
void StartTexEnviv(Startenum target, Startenum pname, const(Startint)* params);
void StartTexEnvxv(Startenum target, Startenum pname, const(Startfixed)* params);
void StartTexImage2D(Startenum target, Startint level, Startint internalformat, Startsizei width, Startsizei height, Startint border, Startenum format, Startenum type, const(Startvoid)* pixels);
void StartTexParameteri(Startenum target, Startenum pname, Startint param);
void StartTexParameterx(Startenum target, Startenum pname, Startfixed param);
void StartTexParameteriv(Startenum target, Startenum pname, const(Startint)* params);
void StartTexParameterxv(Startenum target, Startenum pname, const(Startfixed)* params);
void StartTexSubImage2D(Startenum target, Startint level, Startint xoffset, Startint yoffset, Startsizei width, Startsizei height, Startenum format, Startenum type, const(Startvoid)* pixels);
void StartTranslatex(Startfixed x, Startfixed y, Startfixed z);
void StartVertexPointer(Startint size, Startenum type, Startsizei stride, const(Startvoid)* pointer);
void StartViewport(Startint x, Startint y, Startsizei width, Startsizei height);
