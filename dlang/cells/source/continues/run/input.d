module continues.run.input;

version (ARM):
extern (D):
@system:
nothrow:
@nogc:

alias void RunInputvoid;
alias char RunInputchar;
alias uint RunInputenum;
alias ubyte RunInputboolean;
alias uint RunInputbitfield;
alias byte RunInputbyte;
alias short RunInputshort;
alias int RunInputint;
alias int RunInputsizei;
alias ubyte RunInputubyte;
alias ushort RunInputushort;
alias uint RunInputuint;
alias float RunInputfloat;
alias float RunInputclampf;
alias int RunInputfixed;
alias c_long RunInputintptr;
alias c_long RunInputsizeiptr;
alias ushort RunInputhalf;
alias long RunInputint64;
alias ulong RunInputuint64;
alias __RunInputsync* RunInputsync;

enum RunInput_ES_VERSION_3_0                                = 1;
enum RunInput_ES_VERSION_2_0                                = 1;
enum RunInput_DEPTH_BUFFER_BIT                              = 0x00000100;
enum RunInput_STENCIL_BUFFER_BIT                            = 0x00000400;
enum RunInput_COLOR_BUFFER_BIT                              = 0x00004000;
enum RunInput_FALSE                                         = 0;
enum RunInput_TRUE                                          = 1;
enum RunInput_POINTS                                        = 0x0000;
enum RunInput_LINES                                         = 0x0001;
enum RunInput_LINE_LOOP                                     = 0x0002;
enum RunInput_LINE_STRIP                                    = 0x0003;
enum RunInput_TRIANRunInputES                                     = 0x0004;
enum RunInput_TRIANRunInputE_STRIP                                = 0x0005;
enum RunInput_TRIANRunInputE_FAN                                  = 0x0006;
enum RunInput_ZERO                                          = 0;
enum RunInput_ONE                                           = 1;
enum RunInput_SRC_COLOR                                     = 0x0300;
enum RunInput_ONE_MINUS_SRC_COLOR                           = 0x0301;
enum RunInput_SRC_ALPHA                                     = 0x0302;
enum RunInput_ONE_MINUS_SRC_ALPHA                           = 0x0303;
enum RunInput_DST_ALPHA                                     = 0x0304;
enum RunInput_ONE_MINUS_DST_ALPHA                           = 0x0305;
enum RunInput_DST_COLOR                                     = 0x0306;
enum RunInput_ONE_MINUS_DST_COLOR                           = 0x0307;
enum RunInput_SRC_ALPHA_SATURATE                            = 0x0308;
enum RunInput_FUNC_ADD                                      = 0x8006;
enum RunInput_BLEND_EQUATION                                = 0x8009;
enum RunInput_BLEND_EQUATION_RGB                            = 0x8009;
enum RunInput_BLEND_EQUATION_ALPHA                          = 0x883D;
enum RunInput_FUNC_SUBTRACT                                 = 0x800A;
enum RunInput_FUNC_REVERSE_SUBTRACT                         = 0x800B;
enum RunInput_BLEND_DST_RGB                                 = 0x80C8;
enum RunInput_BLEND_SRC_RGB                                 = 0x80C9;
enum RunInput_BLEND_DST_ALPHA                               = 0x80CA;
enum RunInput_BLEND_SRC_ALPHA                               = 0x80CB;
enum RunInput_CONSTANT_COLOR                                = 0x8001;
enum RunInput_ONE_MINUS_CONSTANT_COLOR                      = 0x8002;
enum RunInput_CONSTANT_ALPHA                                = 0x8003;
enum RunInput_ONE_MINUS_CONSTANT_ALPHA                      = 0x8004;
enum RunInput_BLEND_COLOR                                   = 0x8005;
enum RunInput_ARRAY_BUFFER                                  = 0x8892;
enum RunInput_ELEMENT_ARRAY_BUFFER                          = 0x8893;
enum RunInput_ARRAY_BUFFER_BINDING                          = 0x8894;
enum RunInput_ELEMENT_ARRAY_BUFFER_BINDING                  = 0x8895;
enum RunInput_STREAM_DRAW                                   = 0x88E0;
enum RunInput_STATIC_DRAW                                   = 0x88E4;
enum RunInput_DYNAMIC_DRAW                                  = 0x88E8;
enum RunInput_BUFFER_SIZE                                   = 0x8764;
enum RunInput_BUFFER_USAGE                                  = 0x8765;
enum RunInput_CURRENT_VERTEX_ATTRIB                         = 0x8626;
enum RunInput_FRONT                                         = 0x0404;
enum RunInput_BACK                                          = 0x0405;
enum RunInput_FRONT_AND_BACK                                = 0x0408;
enum RunInput_TEXTURE_2D                                    = 0x0DE1;
enum RunInput_CULL_FACE                                     = 0x0B44;
enum RunInput_BLEND                                         = 0x0BE2;
enum RunInput_DITHER                                        = 0x0BD0;
enum RunInput_STENCIL_TEST                                  = 0x0B90;
enum RunInput_DEPTH_TEST                                    = 0x0B71;
enum RunInput_SCISSOR_TEST                                  = 0x0C11;
enum RunInput_POLYGON_OFFSET_FILL                           = 0x8037;
enum RunInput_SAMPLE_ALPHA_TO_COVERAGE                      = 0x809E;
enum RunInput_SAMPLE_COVERAGE                               = 0x80A0;
enum RunInput_NO_ERROR                                      = 0;
enum RunInput_INVALID_ENUM                                  = 0x0500;
enum RunInput_INVALID_VALUE                                 = 0x0501;
enum RunInput_INVALID_OPERATION                             = 0x0502;
enum RunInput_OUT_OF_MEMORY                                 = 0x0505;
enum RunInput_CW                                            = 0x0900;
enum RunInput_CCW                                           = 0x0901;
enum RunInput_LINE_WIDTH                                    = 0x0B21;
enum RunInput_ALIASED_POINT_SIZE_RANGE                      = 0x846D;
enum RunInput_ALIASED_LINE_WIDTH_RANGE                      = 0x846E;
enum RunInput_CULL_FACE_MODE                                = 0x0B45;
enum RunInput_FRONT_FACE                                    = 0x0B46;
enum RunInput_DEPTH_RANGE                                   = 0x0B70;
enum RunInput_DEPTH_WRITEMASK                               = 0x0B72;
enum RunInput_DEPTH_CLEAR_VALUE                             = 0x0B73;
enum RunInput_DEPTH_FUNC                                    = 0x0B74;
enum RunInput_STENCIL_CLEAR_VALUE                           = 0x0B91;
enum RunInput_STENCIL_FUNC                                  = 0x0B92;
enum RunInput_STENCIL_FAIL                                  = 0x0B94;
enum RunInput_STENCIL_PASS_DEPTH_FAIL                       = 0x0B95;
enum RunInput_STENCIL_PASS_DEPTH_PASS                       = 0x0B96;
enum RunInput_STENCIL_REF                                   = 0x0B97;
enum RunInput_STENCIL_VALUE_MASK                            = 0x0B93;
enum RunInput_STENCIL_WRITEMASK                             = 0x0B98;
enum RunInput_STENCIL_BACK_FUNC                             = 0x8800;
enum RunInput_STENCIL_BACK_FAIL                             = 0x8801;
enum RunInput_STENCIL_BACK_PASS_DEPTH_FAIL                  = 0x8802;
enum RunInput_STENCIL_BACK_PASS_DEPTH_PASS                  = 0x8803;
enum RunInput_STENCIL_BACK_REF                              = 0x8CA3;
enum RunInput_STENCIL_BACK_VALUE_MASK                       = 0x8CA4;
enum RunInput_STENCIL_BACK_WRITEMASK                        = 0x8CA5;
enum RunInput_VIEWPORT                                      = 0x0BA2;
enum RunInput_SCISSOR_BOX                                   = 0x0C10;
enum RunInput_COLOR_CLEAR_VALUE                             = 0x0C22;
enum RunInput_COLOR_WRITEMASK                               = 0x0C23;
enum RunInput_UNPACK_ALIGNMENT                              = 0x0CF5;
enum RunInput_PACK_ALIGNMENT                                = 0x0D05;
enum RunInput_MAX_TEXTURE_SIZE                              = 0x0D33;
enum RunInput_MAX_VIEWPORT_DIMS                             = 0x0D3A;
enum RunInput_SUBPIXEL_BITS                                 = 0x0D50;
enum RunInput_RED_BITS                                      = 0x0D52;
enum RunInput_GREEN_BITS                                    = 0x0D53;
enum RunInput_BLUE_BITS                                     = 0x0D54;
enum RunInput_ALPHA_BITS                                    = 0x0D55;
enum RunInput_DEPTH_BITS                                    = 0x0D56;
enum RunInput_STENCIL_BITS                                  = 0x0D57;
enum RunInput_POLYGON_OFFSET_UNITS                          = 0x2A00;
enum RunInput_POLYGON_OFFSET_FACTOR                         = 0x8038;
enum RunInput_TEXTURE_BINDING_2D                            = 0x8069;
enum RunInput_SAMPLE_BUFFERS                                = 0x80A8;
enum RunInput_SAMPLES                                       = 0x80A9;
enum RunInput_SAMPLE_COVERAGE_VALUE                         = 0x80AA;
enum RunInput_SAMPLE_COVERAGE_INVERT                        = 0x80AB;
enum RunInput_NUM_COMPRESSED_TEXTURE_FORMATS                = 0x86A2;
enum RunInput_COMPRESSED_TEXTURE_FORMATS                    = 0x86A3;
enum RunInput_DONT_CARE                                     = 0x1100;
enum RunInput_FASTEST                                       = 0x1101;
enum RunInput_NICEST                                        = 0x1102;
enum RunInput_GENERATE_MIPMAP_HINT                          = 0x8192;
enum RunInput_BYTE                                          = 0x1400;
enum RunInput_UNSIGNED_BYTE                                 = 0x1401;
enum RunInput_SHORT                                         = 0x1402;
enum RunInput_UNSIGNED_SHORT                                = 0x1403;
enum RunInput_INT                                           = 0x1404;
enum RunInput_UNSIGNED_INT                                  = 0x1405;
enum RunInput_FLOAT                                         = 0x1406;
enum RunInput_FIXED                                         = 0x140C;
enum RunInput_DEPTH_COMPONENT                               = 0x1902;
enum RunInput_ALPHA                                         = 0x1906;
enum RunInput_RGB                                           = 0x1907;
enum RunInput_RGBA                                          = 0x1908;
enum RunInput_LUMINANCE                                     = 0x1909;
enum RunInput_LUMINANCE_ALPHA                               = 0x190A;
enum RunInput_UNSIGNED_SHORT_4_4_4_4                        = 0x8033;
enum RunInput_UNSIGNED_SHORT_5_5_5_1                        = 0x8034;
enum RunInput_UNSIGNED_SHORT_5_6_5                          = 0x8363;
enum RunInput_FRAGMENT_SHADER                               = 0x8B30;
enum RunInput_VERTEX_SHADER                                 = 0x8B31;
enum RunInput_MAX_VERTEX_ATTRIBS                            = 0x8869;
enum RunInput_MAX_VERTEX_UNIFORM_VECTORS                    = 0x8DFB;
enum RunInput_MAX_VARYING_VECTORS                           = 0x8DFC;
enum RunInput_MAX_COMBINED_TEXTURE_IMAGE_UNITS              = 0x8B4D;
enum RunInput_MAX_VERTEX_TEXTURE_IMAGE_UNITS                = 0x8B4C;
enum RunInput_MAX_TEXTURE_IMAGE_UNITS                       = 0x8872;
enum RunInput_MAX_FRAGMENT_UNIFORM_VECTORS                  = 0x8DFD;
enum RunInput_SHADER_TYPE                                   = 0x8B4F;
enum RunInput_DELETE_STATUS                                 = 0x8B80;
enum RunInput_LINK_STATUS                                   = 0x8B82;
enum RunInput_VALIDATE_STATUS                               = 0x8B83;
enum RunInput_ATTACHED_SHADERS                              = 0x8B85;
enum RunInput_ACTIVE_UNIFORMS                               = 0x8B86;
enum RunInput_ACTIVE_UNIFORM_MAX_LENGTH                     = 0x8B87;
enum RunInput_ACTIVE_ATTRIBUTES                             = 0x8B89;
enum RunInput_ACTIVE_ATTRIBUTE_MAX_LENGTH                   = 0x8B8A;
enum RunInput_SHADING_LANGUAGE_VERSION                      = 0x8B8C;
enum RunInput_CURRENT_PROGRAM                               = 0x8B8D;
enum RunInput_NEVER                                         = 0x0200;
enum RunInput_LESS                                          = 0x0201;
enum RunInput_EQUAL                                         = 0x0202;
enum RunInput_LEQUAL                                        = 0x0203;
enum RunInput_GREATER                                       = 0x0204;
enum RunInput_NOTEQUAL                                      = 0x0205;
enum RunInput_GEQUAL                                        = 0x0206;
enum RunInput_ALWAYS                                        = 0x0207;
enum RunInput_KEEP                                          = 0x1E00;
enum RunInput_REPLACE                                       = 0x1E01;
enum RunInput_INCR                                          = 0x1E02;
enum RunInput_DECR                                          = 0x1E03;
enum RunInput_INVERT                                        = 0x150A;
enum RunInput_INCR_WRAP                                     = 0x8507;
enum RunInput_DECR_WRAP                                     = 0x8508;
enum RunInput_VENDOR                                        = 0x1F00;
enum RunInput_RENDERER                                      = 0x1F01;
enum RunInput_VERSION                                       = 0x1F02;
enum RunInput_EXTENSIONS                                    = 0x1F03;
enum RunInput_NEAREST                                       = 0x2600;
enum RunInput_LINEAR                                        = 0x2601;
enum RunInput_NEAREST_MIPMAP_NEAREST                        = 0x2700;
enum RunInput_LINEAR_MIPMAP_NEAREST                         = 0x2701;
enum RunInput_NEAREST_MIPMAP_LINEAR                         = 0x2702;
enum RunInput_LINEAR_MIPMAP_LINEAR                          = 0x2703;
enum RunInput_TEXTURE_MAG_FILTER                            = 0x2800;
enum RunInput_TEXTURE_MIN_FILTER                            = 0x2801;
enum RunInput_TEXTURE_WRAP_S                                = 0x2802;
enum RunInput_TEXTURE_WRAP_T                                = 0x2803;
enum RunInput_TEXTURE                                       = 0x1702;
enum RunInput_TEXTURE_CUBE_MAP                              = 0x8513;
enum RunInput_TEXTURE_BINDING_CUBE_MAP                      = 0x8514;
enum RunInput_TEXTURE_CUBE_MAP_POSITIVE_X                   = 0x8515;
enum RunInput_TEXTURE_CUBE_MAP_NEGATIVE_X                   = 0x8516;
enum RunInput_TEXTURE_CUBE_MAP_POSITIVE_Y                   = 0x8517;
enum RunInput_TEXTURE_CUBE_MAP_NEGATIVE_Y                   = 0x8518;
enum RunInput_TEXTURE_CUBE_MAP_POSITIVE_Z                   = 0x8519;
enum RunInput_TEXTURE_CUBE_MAP_NEGATIVE_Z                   = 0x851A;
enum RunInput_MAX_CUBE_MAP_TEXTURE_SIZE                     = 0x851C;
enum RunInput_TEXTURE0                                      = 0x84C0;
enum RunInput_TEXTURE1                                      = 0x84C1;
enum RunInput_TEXTURE2                                      = 0x84C2;
enum RunInput_TEXTURE3                                      = 0x84C3;
enum RunInput_TEXTURE4                                      = 0x84C4;
enum RunInput_TEXTURE5                                      = 0x84C5;
enum RunInput_TEXTURE6                                      = 0x84C6;
enum RunInput_TEXTURE7                                      = 0x84C7;
enum RunInput_TEXTURE8                                      = 0x84C8;
enum RunInput_TEXTURE9                                      = 0x84C9;
enum RunInput_TEXTURE10                                     = 0x84CA;
enum RunInput_TEXTURE11                                     = 0x84CB;
enum RunInput_TEXTURE12                                     = 0x84CC;
enum RunInput_TEXTURE13                                     = 0x84CD;
enum RunInput_TEXTURE14                                     = 0x84CE;
enum RunInput_TEXTURE15                                     = 0x84CF;
enum RunInput_TEXTURE16                                     = 0x84D0;
enum RunInput_TEXTURE17                                     = 0x84D1;
enum RunInput_TEXTURE18                                     = 0x84D2;
enum RunInput_TEXTURE19                                     = 0x84D3;
enum RunInput_TEXTURE20                                     = 0x84D4;
enum RunInput_TEXTURE21                                     = 0x84D5;
enum RunInput_TEXTURE22                                     = 0x84D6;
enum RunInput_TEXTURE23                                     = 0x84D7;
enum RunInput_TEXTURE24                                     = 0x84D8;
enum RunInput_TEXTURE25                                     = 0x84D9;
enum RunInput_TEXTURE26                                     = 0x84DA;
enum RunInput_TEXTURE27                                     = 0x84DB;
enum RunInput_TEXTURE28                                     = 0x84DC;
enum RunInput_TEXTURE29                                     = 0x84DD;
enum RunInput_TEXTURE30                                     = 0x84DE;
enum RunInput_TEXTURE31                                     = 0x84DF;
enum RunInput_ACTIVE_TEXTURE                                = 0x84E0;
enum RunInput_REPEAT                                        = 0x2901;
enum RunInput_CLAMP_TO_EDGE                                 = 0x812F;
enum RunInput_MIRRORED_REPEAT                               = 0x8370;
enum RunInput_FLOAT_VEC2                                    = 0x8B50;
enum RunInput_FLOAT_VEC3                                    = 0x8B51;
enum RunInput_FLOAT_VEC4                                    = 0x8B52;
enum RunInput_INT_VEC2                                      = 0x8B53;
enum RunInput_INT_VEC3                                      = 0x8B54;
enum RunInput_INT_VEC4                                      = 0x8B55;
enum RunInput_BOOL                                          = 0x8B56;
enum RunInput_BOOL_VEC2                                     = 0x8B57;
enum RunInput_BOOL_VEC3                                     = 0x8B58;
enum RunInput_BOOL_VEC4                                     = 0x8B59;
enum RunInput_FLOAT_MAT2                                    = 0x8B5A;
enum RunInput_FLOAT_MAT3                                    = 0x8B5B;
enum RunInput_FLOAT_MAT4                                    = 0x8B5C;
enum RunInput_SAMPLER_2D                                    = 0x8B5E;
enum RunInput_SAMPLER_CUBE                                  = 0x8B60;
enum RunInput_VERTEX_ATTRIB_ARRAY_ENABLED                   = 0x8622;
enum RunInput_VERTEX_ATTRIB_ARRAY_SIZE                      = 0x8623;
enum RunInput_VERTEX_ATTRIB_ARRAY_STRIDE                    = 0x8624;
enum RunInput_VERTEX_ATTRIB_ARRAY_TYPE                      = 0x8625;
enum RunInput_VERTEX_ATTRIB_ARRAY_NORMALIZED                = 0x886A;
enum RunInput_VERTEX_ATTRIB_ARRAY_POINTER                   = 0x8645;
enum RunInput_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING            = 0x889F;
enum RunInput_IMPLEMENTATION_COLOR_READ_TYPE                = 0x8B9A;
enum RunInput_IMPLEMENTATION_COLOR_READ_FORMAT              = 0x8B9B;
enum RunInput_COMPILE_STATUS                                = 0x8B81;
enum RunInput_INFO_LOG_LENGTH                               = 0x8B84;
enum RunInput_SHADER_SOURCE_LENGTH                          = 0x8B88;
enum RunInput_SHADER_COMPILER                               = 0x8DFA;
enum RunInput_SHADER_BINARY_FORMATS                         = 0x8DF8;
enum RunInput_NUM_SHADER_BINARY_FORMATS                     = 0x8DF9;
enum RunInput_LOW_FLOAT                                     = 0x8DF0;
enum RunInput_MEDIUM_FLOAT                                  = 0x8DF1;
enum RunInput_HIGH_FLOAT                                    = 0x8DF2;
enum RunInput_LOW_INT                                       = 0x8DF3;
enum RunInput_MEDIUM_INT                                    = 0x8DF4;
enum RunInput_HIGH_INT                                      = 0x8DF5;
enum RunInput_FRAMEBUFFER                                   = 0x8D40;
enum RunInput_RENDERBUFFER                                  = 0x8D41;
enum RunInput_RGBA4                                         = 0x8056;
enum RunInput_RGB5_A1                                       = 0x8057;
enum RunInput_RGB565                                        = 0x8D62;
enum RunInput_DEPTH_COMPONENT16                             = 0x81A5;
enum RunInput_STENCIL_INDEX8                                = 0x8D48;
enum RunInput_RENDERBUFFER_WIDTH                            = 0x8D42;
enum RunInput_RENDERBUFFER_HEIGHT                           = 0x8D43;
enum RunInput_RENDERBUFFER_INTERNAL_FORMAT                  = 0x8D44;
enum RunInput_RENDERBUFFER_RED_SIZE                         = 0x8D50;
enum RunInput_RENDERBUFFER_GREEN_SIZE                       = 0x8D51;
enum RunInput_RENDERBUFFER_BLUE_SIZE                        = 0x8D52;
enum RunInput_RENDERBUFFER_ALPHA_SIZE                       = 0x8D53;
enum RunInput_RENDERBUFFER_DEPTH_SIZE                       = 0x8D54;
enum RunInput_RENDERBUFFER_STENCIL_SIZE                     = 0x8D55;
enum RunInput_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE            = 0x8CD0;
enum RunInput_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME            = 0x8CD1;
enum RunInput_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL          = 0x8CD2;
enum RunInput_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE  = 0x8CD3;
enum RunInput_COLOR_ATTACHMENT0                             = 0x8CE0;
enum RunInput_DEPTH_ATTACHMENT                              = 0x8D00;
enum RunInput_STENCIL_ATTACHMENT                            = 0x8D20;
enum RunInput_NONE                                          = 0;
enum RunInput_FRAMEBUFFER_COMPLETE                          = 0x8CD5;
enum RunInput_FRAMEBUFFER_INCOMPLETE_ATTACHMENT             = 0x8CD6;
enum RunInput_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT     = 0x8CD7;
enum RunInput_FRAMEBUFFER_INCOMPLETE_DIMENSIONS             = 0x8CD9;
enum RunInput_FRAMEBUFFER_UNSUPPORTED                       = 0x8CDD;
enum RunInput_FRAMEBUFFER_BINDING                           = 0x8CA6;
enum RunInput_RENDERBUFFER_BINDING                          = 0x8CA7;
enum RunInput_MAX_RENDERBUFFER_SIZE                         = 0x84E8;
enum RunInput_INVALID_FRAMEBUFFER_OPERATION                 = 0x0506;
enum RunInput_READ_BUFFER                                   = 0x0C02;
enum RunInput_UNPACK_ROW_LENGTH                             = 0x0CF2;
enum RunInput_UNPACK_SKIP_ROWS                              = 0x0CF3;
enum RunInput_UNPACK_SKIP_PIXELS                            = 0x0CF4;
enum RunInput_PACK_ROW_LENGTH                               = 0x0D02;
enum RunInput_PACK_SKIP_ROWS                                = 0x0D03;
enum RunInput_PACK_SKIP_PIXELS                              = 0x0D04;
enum RunInput_COLOR                                         = 0x1800;
enum RunInput_DEPTH                                         = 0x1801;
enum RunInput_STENCIL                                       = 0x1802;
enum RunInput_RED                                           = 0x1903;
enum RunInput_RGB8                                          = 0x8051;
enum RunInput_RGBA8                                         = 0x8058;
enum RunInput_RGB10_A2                                      = 0x8059;
enum RunInput_TEXTURE_BINDING_3D                            = 0x806A;
enum RunInput_UNPACK_SKIP_IMAGES                            = 0x806D;
enum RunInput_UNPACK_IMAGE_HEIGHT                           = 0x806E;
enum RunInput_TEXTURE_3D                                    = 0x806F;
enum RunInput_TEXTURE_WRAP_R                                = 0x8072;
enum RunInput_MAX_3D_TEXTURE_SIZE                           = 0x8073;
enum RunInput_UNSIGNED_INT_2_10_10_10_REV                   = 0x8368;
enum RunInput_MAX_ELEMENTS_VERTICES                         = 0x80E8;
enum RunInput_MAX_ELEMENTS_INDICES                          = 0x80E9;
enum RunInput_TEXTURE_MIN_LOD                               = 0x813A;
enum RunInput_TEXTURE_MAX_LOD                               = 0x813B;
enum RunInput_TEXTURE_BASE_LEVEL                            = 0x813C;
enum RunInput_TEXTURE_MAX_LEVEL                             = 0x813D;
enum RunInput_MIN                                           = 0x8007;
enum RunInput_MAX                                           = 0x8008;
enum RunInput_DEPTH_COMPONENT24                             = 0x81A6;
enum RunInput_MAX_TEXTURE_LOD_BIAS                          = 0x84FD;
enum RunInput_TEXTURE_COMPARE_MODE                          = 0x884C;
enum RunInput_TEXTURE_COMPARE_FUNC                          = 0x884D;
enum RunInput_CURRENT_QUERY                                 = 0x8865;
enum RunInput_QUERY_RESULT                                  = 0x8866;
enum RunInput_QUERY_RESULT_AVAILABLE                        = 0x8867;
enum RunInput_BUFFER_MAPPED                                 = 0x88BC;
enum RunInput_BUFFER_MAP_POINTER                            = 0x88BD;
enum RunInput_STREAM_READ                                   = 0x88E1;
enum RunInput_STREAM_COPY                                   = 0x88E2;
enum RunInput_STATIC_READ                                   = 0x88E5;
enum RunInput_STATIC_COPY                                   = 0x88E6;
enum RunInput_DYNAMIC_READ                                  = 0x88E9;
enum RunInput_DYNAMIC_COPY                                  = 0x88EA;
enum RunInput_MAX_DRAW_BUFFERS                              = 0x8824;
enum RunInput_DRAW_BUFFER0                                  = 0x8825;
enum RunInput_DRAW_BUFFER1                                  = 0x8826;
enum RunInput_DRAW_BUFFER2                                  = 0x8827;
enum RunInput_DRAW_BUFFER3                                  = 0x8828;
enum RunInput_DRAW_BUFFER4                                  = 0x8829;
enum RunInput_DRAW_BUFFER5                                  = 0x882A;
enum RunInput_DRAW_BUFFER6                                  = 0x882B;
enum RunInput_DRAW_BUFFER7                                  = 0x882C;
enum RunInput_DRAW_BUFFER8                                  = 0x882D;
enum RunInput_DRAW_BUFFER9                                  = 0x882E;
enum RunInput_DRAW_BUFFER10                                 = 0x882F;
enum RunInput_DRAW_BUFFER11                                 = 0x8830;
enum RunInput_DRAW_BUFFER12                                 = 0x8831;
enum RunInput_DRAW_BUFFER13                                 = 0x8832;
enum RunInput_DRAW_BUFFER14                                 = 0x8833;
enum RunInput_DRAW_BUFFER15                                 = 0x8834;
enum RunInput_MAX_FRAGMENT_UNIFORM_COMPONENTS               = 0x8B49;
enum RunInput_MAX_VERTEX_UNIFORM_COMPONENTS                 = 0x8B4A;
enum RunInput_SAMPLER_3D                                    = 0x8B5F;
enum RunInput_SAMPLER_2D_SHADOW                             = 0x8B62;
enum RunInput_FRAGMENT_SHADER_DERIVATIVE_HINT               = 0x8B8B;
enum RunInput_PIXEL_PACK_BUFFER                             = 0x88EB;
enum RunInput_PIXEL_UNPACK_BUFFER                           = 0x88EC;
enum RunInput_PIXEL_PACK_BUFFER_BINDING                     = 0x88ED;
enum RunInput_PIXEL_UNPACK_BUFFER_BINDING                   = 0x88EF;
enum RunInput_FLOAT_MAT2x3                                  = 0x8B65;
enum RunInput_FLOAT_MAT2x4                                  = 0x8B66;
enum RunInput_FLOAT_MAT3x2                                  = 0x8B67;
enum RunInput_FLOAT_MAT3x4                                  = 0x8B68;
enum RunInput_FLOAT_MAT4x2                                  = 0x8B69;
enum RunInput_FLOAT_MAT4x3                                  = 0x8B6A;
enum RunInput_SRGB                                          = 0x8C40;
enum RunInput_SRGB8                                         = 0x8C41;
enum RunInput_SRGB8_ALPHA8                                  = 0x8C43;
enum RunInput_COMPARE_REF_TO_TEXTURE                        = 0x884E;
enum RunInput_MAJOR_VERSION                                 = 0x821B;
enum RunInput_MINOR_VERSION                                 = 0x821C;
enum RunInput_NUM_EXTENSIONS                                = 0x821D;
enum RunInput_RGBA32F                                       = 0x8814;
enum RunInput_RGB32F                                        = 0x8815;
enum RunInput_RGBA16F                                       = 0x881A;
enum RunInput_RGB16F                                        = 0x881B;
enum RunInput_VERTEX_ATTRIB_ARRAY_INTEGER                   = 0x88FD;
enum RunInput_MAX_ARRAY_TEXTURE_LAYERS                      = 0x88FF;
enum RunInput_MIN_PROGRAM_TEXEL_OFFSET                      = 0x8904;
enum RunInput_MAX_PROGRAM_TEXEL_OFFSET                      = 0x8905;
enum RunInput_MAX_VARYING_COMPONENTS                        = 0x8B4B;
enum RunInput_TEXTURE_2D_ARRAY                              = 0x8C1A;
enum RunInput_TEXTURE_BINDING_2D_ARRAY                      = 0x8C1D;
enum RunInput_R11F_G11F_B10F                                = 0x8C3A;
enum RunInput_UNSIGNED_INT_10F_11F_11F_REV                  = 0x8C3B;
enum RunInput_RGB9_E5                                       = 0x8C3D;
enum RunInput_UNSIGNED_INT_5_9_9_9_REV                      = 0x8C3E;
enum RunInput_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH         = 0x8C76;
enum RunInput_TRANSFORM_FEEDBACK_BUFFER_MODE                = 0x8C7F;
enum RunInput_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS    = 0x8C80;
enum RunInput_TRANSFORM_FEEDBACK_VARYINGS                   = 0x8C83;
enum RunInput_TRANSFORM_FEEDBACK_BUFFER_START               = 0x8C84;
enum RunInput_TRANSFORM_FEEDBACK_BUFFER_SIZE                = 0x8C85;
enum RunInput_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN         = 0x8C88;
enum RunInput_RASTERIZER_DISCARD                            = 0x8C89;
enum RunInput_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
enum RunInput_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS       = 0x8C8B;
enum RunInput_INTERLEAVED_ATTRIBS                           = 0x8C8C;
enum RunInput_SEPARATE_ATTRIBS                              = 0x8C8D;
enum RunInput_TRANSFORM_FEEDBACK_BUFFER                     = 0x8C8E;
enum RunInput_TRANSFORM_FEEDBACK_BUFFER_BINDING             = 0x8C8F;
enum RunInput_RGBA32UI                                      = 0x8D70;
enum RunInput_RGB32UI                                       = 0x8D71;
enum RunInput_RGBA16UI                                      = 0x8D76;
enum RunInput_RGB16UI                                       = 0x8D77;
enum RunInput_RGBA8UI                                       = 0x8D7C;
enum RunInput_RGB8UI                                        = 0x8D7D;
enum RunInput_RGBA32I                                       = 0x8D82;
enum RunInput_RGB32I                                        = 0x8D83;
enum RunInput_RGBA16I                                       = 0x8D88;
enum RunInput_RGB16I                                        = 0x8D89;
enum RunInput_RGBA8I                                        = 0x8D8E;
enum RunInput_RGB8I                                         = 0x8D8F;
enum RunInput_RED_INTEGER                                   = 0x8D94;
enum RunInput_RGB_INTEGER                                   = 0x8D98;
enum RunInput_RGBA_INTEGER                                  = 0x8D99;
enum RunInput_SAMPLER_2D_ARRAY                              = 0x8DC1;
enum RunInput_SAMPLER_2D_ARRAY_SHADOW                       = 0x8DC4;
enum RunInput_SAMPLER_CUBE_SHADOW                           = 0x8DC5;
enum RunInput_UNSIGNED_INT_VEC2                             = 0x8DC6;
enum RunInput_UNSIGNED_INT_VEC3                             = 0x8DC7;
enum RunInput_UNSIGNED_INT_VEC4                             = 0x8DC8;
enum RunInput_INT_SAMPLER_2D                                = 0x8DCA;
enum RunInput_INT_SAMPLER_3D                                = 0x8DCB;
enum RunInput_INT_SAMPLER_CUBE                              = 0x8DCC;
enum RunInput_INT_SAMPLER_2D_ARRAY                          = 0x8DCF;
enum RunInput_UNSIGNED_INT_SAMPLER_2D                       = 0x8DD2;
enum RunInput_UNSIGNED_INT_SAMPLER_3D                       = 0x8DD3;
enum RunInput_UNSIGNED_INT_SAMPLER_CUBE                     = 0x8DD4;
enum RunInput_UNSIGNED_INT_SAMPLER_2D_ARRAY                 = 0x8DD7;
enum RunInput_BUFFER_ACCESS_FLAGS                           = 0x911F;
enum RunInput_BUFFER_MAP_LENGTH                             = 0x9120;
enum RunInput_BUFFER_MAP_OFFSET                             = 0x9121;
enum RunInput_DEPTH_COMPONENT32F                            = 0x8CAC;
enum RunInput_DEPTH32F_STENCIL8                             = 0x8CAD;
enum RunInput_FLOAT_32_UNSIGNED_INT_24_8_REV                = 0x8DAD;
enum RunInput_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING         = 0x8210;
enum RunInput_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE         = 0x8211;
enum RunInput_FRAMEBUFFER_ATTACHMENT_RED_SIZE               = 0x8212;
enum RunInput_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE             = 0x8213;
enum RunInput_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE              = 0x8214;
enum RunInput_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE             = 0x8215;
enum RunInput_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE             = 0x8216;
enum RunInput_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE           = 0x8217;
enum RunInput_FRAMEBUFFER_DEFAULT                           = 0x8218;
enum RunInput_FRAMEBUFFER_UNDEFINED                         = 0x8219;
enum RunInput_DEPTH_STENCIL_ATTACHMENT                      = 0x821A;
enum RunInput_DEPTH_STENCIL                                 = 0x84F9;
enum RunInput_UNSIGNED_INT_24_8                             = 0x84FA;
enum RunInput_DEPTH24_STENCIL8                              = 0x88F0;
enum RunInput_UNSIGNED_NORMALIZED                           = 0x8C17;
enum RunInput_DRAW_FRAMEBUFFER_BINDING                      = RunInput_FRAMEBUFFER_BINDING;
enum RunInput_READ_FRAMEBUFFER                              = 0x8CA8;
enum RunInput_DRAW_FRAMEBUFFER                              = 0x8CA9;
enum RunInput_READ_FRAMEBUFFER_BINDING                      = 0x8CAA;
enum RunInput_RENDERBUFFER_SAMPLES                          = 0x8CAB;
enum RunInput_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER          = 0x8CD4;
enum RunInput_MAX_COLOR_ATTACHMENTS                         = 0x8CDF;
enum RunInput_COLOR_ATTACHMENT1                             = 0x8CE1;
enum RunInput_COLOR_ATTACHMENT2                             = 0x8CE2;
enum RunInput_COLOR_ATTACHMENT3                             = 0x8CE3;
enum RunInput_COLOR_ATTACHMENT4                             = 0x8CE4;
enum RunInput_COLOR_ATTACHMENT5                             = 0x8CE5;
enum RunInput_COLOR_ATTACHMENT6                             = 0x8CE6;
enum RunInput_COLOR_ATTACHMENT7                             = 0x8CE7;
enum RunInput_COLOR_ATTACHMENT8                             = 0x8CE8;
enum RunInput_COLOR_ATTACHMENT9                             = 0x8CE9;
enum RunInput_COLOR_ATTACHMENT10                            = 0x8CEA;
enum RunInput_COLOR_ATTACHMENT11                            = 0x8CEB;
enum RunInput_COLOR_ATTACHMENT12                            = 0x8CEC;
enum RunInput_COLOR_ATTACHMENT13                            = 0x8CED;
enum RunInput_COLOR_ATTACHMENT14                            = 0x8CEE;
enum RunInput_COLOR_ATTACHMENT15                            = 0x8CEF;
enum RunInput_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE            = 0x8D56;
enum RunInput_MAX_SAMPLES                                   = 0x8D57;
enum RunInput_HALF_FLOAT                                    = 0x140B;
enum RunInput_MAP_READ_BIT                                  = 0x0001;
enum RunInput_MAP_WRITE_BIT                                 = 0x0002;
enum RunInput_MAP_INVALIDATE_RANGE_BIT                      = 0x0004;
enum RunInput_MAP_INVALIDATE_BUFFER_BIT                     = 0x0008;
enum RunInput_MAP_FLUSH_EXPLICIT_BIT                        = 0x0010;
enum RunInput_MAP_UNSYNCHRONIZED_BIT                        = 0x0020;
enum RunInput_RG                                            = 0x8227;
enum RunInput_RG_INTEGER                                    = 0x8228;
enum RunInput_R8                                            = 0x8229;
enum RunInput_RG8                                           = 0x822B;
enum RunInput_R16F                                          = 0x822D;
enum RunInput_R32F                                          = 0x822E;
enum RunInput_RG16F                                         = 0x822F;
enum RunInput_RG32F                                         = 0x8230;
enum RunInput_R8I                                           = 0x8231;
enum RunInput_R8UI                                          = 0x8232;
enum RunInput_R16I                                          = 0x8233;
enum RunInput_R16UI                                         = 0x8234;
enum RunInput_R32I                                          = 0x8235;
enum RunInput_R32UI                                         = 0x8236;
enum RunInput_RG8I                                          = 0x8237;
enum RunInput_RG8UI                                         = 0x8238;
enum RunInput_RG16I                                         = 0x8239;
enum RunInput_RG16UI                                        = 0x823A;
enum RunInput_RG32I                                         = 0x823B;
enum RunInput_RG32UI                                        = 0x823C;
enum RunInput_VERTEX_ARRAY_BINDING                          = 0x85B5;
enum RunInput_R8_SNORM                                      = 0x8F94;
enum RunInput_RG8_SNORM                                     = 0x8F95;
enum RunInput_RGB8_SNORM                                    = 0x8F96;
enum RunInput_RGBA8_SNORM                                   = 0x8F97;
enum RunInput_SIGNED_NORMALIZED                             = 0x8F9C;
enum RunInput_PRIMITIVE_RESTART_FIXED_INDEX                 = 0x8D69;
enum RunInput_COPY_READ_BUFFER                              = 0x8F36;
enum RunInput_COPY_WRITE_BUFFER                             = 0x8F37;
enum RunInput_COPY_READ_BUFFER_BINDING                      = RunInput_COPY_READ_BUFFER;
enum RunInput_COPY_WRITE_BUFFER_BINDING                     = RunInput_COPY_WRITE_BUFFER;
enum RunInput_UNIFORM_BUFFER                                = 0x8A11;
enum RunInput_UNIFORM_BUFFER_BINDING                        = 0x8A28;
enum RunInput_UNIFORM_BUFFER_START                          = 0x8A29;
enum RunInput_UNIFORM_BUFFER_SIZE                           = 0x8A2A;
enum RunInput_MAX_VERTEX_UNIFORM_BLOCKS                     = 0x8A2B;
enum RunInput_MAX_FRAGMENT_UNIFORM_BLOCKS                   = 0x8A2D;
enum RunInput_MAX_COMBINED_UNIFORM_BLOCKS                   = 0x8A2E;
enum RunInput_MAX_UNIFORM_BUFFER_BINDINGS                   = 0x8A2F;
enum RunInput_MAX_UNIFORM_BLOCK_SIZE                        = 0x8A30;
enum RunInput_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS        = 0x8A31;
enum RunInput_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS      = 0x8A33;
enum RunInput_UNIFORM_BUFFER_OFFSET_ALIGNMENT               = 0x8A34;
enum RunInput_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH          = 0x8A35;
enum RunInput_ACTIVE_UNIFORM_BLOCKS                         = 0x8A36;
enum RunInput_UNIFORM_TYPE                                  = 0x8A37;
enum RunInput_UNIFORM_SIZE                                  = 0x8A38;
enum RunInput_UNIFORM_NAME_LENGTH                           = 0x8A39;
enum RunInput_UNIFORM_BLOCK_INDEX                           = 0x8A3A;
enum RunInput_UNIFORM_OFFSET                                = 0x8A3B;
enum RunInput_UNIFORM_ARRAY_STRIDE                          = 0x8A3C;
enum RunInput_UNIFORM_MATRIX_STRIDE                         = 0x8A3D;
enum RunInput_UNIFORM_IS_ROW_MAJOR                          = 0x8A3E;
enum RunInput_UNIFORM_BLOCK_BINDING                         = 0x8A3F;
enum RunInput_UNIFORM_BLOCK_DATA_SIZE                       = 0x8A40;
enum RunInput_UNIFORM_BLOCK_NAME_LENGTH                     = 0x8A41;
enum RunInput_UNIFORM_BLOCK_ACTIVE_UNIFORMS                 = 0x8A42;
enum RunInput_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES          = 0x8A43;
enum RunInput_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER     = 0x8A44;
enum RunInput_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER   = 0x8A46;
enum RunInput_INVALID_INDEX                                 = 0xFFFFFFFF;
enum RunInput_MAX_VERTEX_OUTPUT_COMPONENTS                  = 0x9122;
enum RunInput_MAX_FRAGMENT_INPUT_COMPONENTS                 = 0x9125;
enum RunInput_MAX_SERVER_WAIT_TIMEOUT                       = 0x9111;
enum RunInput_OBJECT_TYPE                                   = 0x9112;
enum RunInput_SYNC_CONDITION                                = 0x9113;
enum RunInput_SYNC_STATUS                                   = 0x9114;
enum RunInput_SYNC_FLAGS                                    = 0x9115;
enum RunInput_SYNC_FENCE                                    = 0x9116;
enum RunInput_SYNC_GPU_COMMANDS_COMPLETE                    = 0x9117;
enum RunInput_UNSIGNALED                                    = 0x9118;
enum RunInput_SIGNALED                                      = 0x9119;
enum RunInput_ALREADY_SIGNALED                              = 0x911A;
enum RunInput_TIMEOUT_EXPIRED                               = 0x911B;
enum RunInput_CONDITION_SATISFIED                           = 0x911C;
enum RunInput_WAIT_FAILED                                   = 0x911D;
enum RunInput_SYNC_FLUSH_COMMANDS_BIT                       = 0x00000001;
enum RunInput_TIMEOUT_IGNORED                               = 0xFFFFFFFFFFFFFFFF;
enum RunInput_VERTEX_ATTRIB_ARRAY_DIVISOR                   = 0x88FE;
enum RunInput_ANY_SAMPLES_PASSED                            = 0x8C2F;
enum RunInput_ANY_SAMPLES_PASSED_CONSERVATIVE               = 0x8D6A;
enum RunInput_SAMPLER_BINDING                               = 0x8919;
enum RunInput_RGB10_A2UI                                    = 0x906F;
enum RunInput_TEXTURE_SWIZZLE_R                             = 0x8E42;
enum RunInput_TEXTURE_SWIZZLE_G                             = 0x8E43;
enum RunInput_TEXTURE_SWIZZLE_B                             = 0x8E44;
enum RunInput_TEXTURE_SWIZZLE_A                             = 0x8E45;
enum RunInput_GREEN                                         = 0x1904;
enum RunInput_BLUE                                          = 0x1905;
enum RunInput_INT_2_10_10_10_REV                            = 0x8D9F;
enum RunInput_TRANSFORM_FEEDBACK                            = 0x8E22;
enum RunInput_TRANSFORM_FEEDBACK_PAUSED                     = 0x8E23;
enum RunInput_TRANSFORM_FEEDBACK_ACTIVE                     = 0x8E24;
enum RunInput_TRANSFORM_FEEDBACK_BINDING                    = 0x8E25;
enum RunInput_PROGRAM_BINARY_RETRIEVABLE_HINT               = 0x8257;
enum RunInput_PROGRAM_BINARY_LENGTH                         = 0x8741;
enum RunInput_NUM_PROGRAM_BINARY_FORMATS                    = 0x87FE;
enum RunInput_PROGRAM_BINARY_FORMATS                        = 0x87FF;
enum RunInput_COMPRESSED_R11_EAC                            = 0x9270;
enum RunInput_COMPRESSED_SIGNED_R11_EAC                     = 0x9271;
enum RunInput_COMPRESSED_RG11_EAC                           = 0x9272;
enum RunInput_COMPRESSED_SIGNED_RG11_EAC                    = 0x9273;
enum RunInput_COMPRESSED_RGB8_ETC2                          = 0x9274;
enum RunInput_COMPRESSED_SRGB8_ETC2                         = 0x9275;
enum RunInput_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2      = 0x9276;
enum RunInput_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2     = 0x9277;
enum RunInput_COMPRESSED_RGBA8_ETC2_EAC                     = 0x9278;
enum RunInput_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC              = 0x9279;
enum RunInput_TEXTURE_IMMUTABLE_FORMAT                      = 0x912F;
enum RunInput_MAX_ELEMENT_INDEX                             = 0x8D6B;
enum RunInput_NUM_SAMPLE_COUNTS                             = 0x9380;
enum RunInput_TEXTURE_IMMUTABLE_LEVELS                      = 0x82DF;

struct __RunInputsync;

void RunInputActiveTexture(RunInputenum texture);
void RunInputAttachShader(RunInputuint program, RunInputuint shader);
void RunInputBindAttribLocation(RunInputuint program, RunInputuint index, const(RunInputchar)* name);
void RunInputBindBuffer(RunInputenum target, RunInputuint buffer);
void RunInputBindFramebuffer(RunInputenum target, RunInputuint framebuffer);
void RunInputBindRenderbuffer(RunInputenum target, RunInputuint renderbuffer);
void RunInputBindTexture(RunInputenum target, RunInputuint texture);
void RunInputBlendColor(RunInputfloat red, RunInputfloat green, RunInputfloat blue, RunInputfloat alpha);
void RunInputBlendEquation(RunInputenum mode);
void RunInputBlendEquationSeparate(RunInputenum modeRGB, RunInputenum modeAlpha);
void RunInputBlendFunc(RunInputenum sfactor, RunInputenum dfactor);
void RunInputBlendFuncSeparate(RunInputenum srcRGB, RunInputenum dstRGB, RunInputenum srcAlpha, RunInputenum dstAlpha);
void RunInputBufferData(RunInputenum target, RunInputsizeiptr size, const(RunInputvoid)* data, RunInputenum usage);
void RunInputBufferSubData(RunInputenum target, RunInputintptr offset, RunInputsizeiptr size, const(RunInputvoid)* data);
RunInputenum RunInputCheckFramebufferStatus(RunInputenum target);
void RunInputClear(RunInputbitfield mask);
void RunInputClearColor(RunInputfloat red, RunInputfloat green, RunInputfloat blue, RunInputfloat alpha);
void RunInputClearDepthf(RunInputfloat depth);
void RunInputClearStencil(RunInputint s);
void RunInputColorMask(RunInputboolean red, RunInputboolean green, RunInputboolean blue, RunInputboolean alpha);
void RunInputCompileShader(RunInputuint shader);
void RunInputCompressedTexImage2D(RunInputenum target, RunInputint level, RunInputenum internalformat, RunInputsizei width, RunInputsizei height, RunInputint border, RunInputsizei imageSize, const(RunInputvoid)* data);
void RunInputCompressedTexSubImage2D(RunInputenum target, RunInputint level, RunInputint xoffset, RunInputint yoffset, RunInputsizei width, RunInputsizei height, RunInputenum format, RunInputsizei imageSize, const(RunInputvoid)* data);
void RunInputCopyTexImage2D(RunInputenum target, RunInputint level, RunInputenum internalformat, RunInputint x, RunInputint y, RunInputsizei width, RunInputsizei height, RunInputint border);
void RunInputCopyTexSubImage2D(RunInputenum target, RunInputint level, RunInputint xoffset, RunInputint yoffset, RunInputint x, RunInputint y, RunInputsizei width, RunInputsizei height);
RunInputuint RunInputCreateProgram();
RunInputuint RunInputCreateShader(RunInputenum type);
void RunInputCullFace(RunInputenum mode);
void RunInputDeleteBuffers(RunInputsizei n, const(RunInputuint)* buffers);
void RunInputDeleteFramebuffers(RunInputsizei n, const(RunInputuint)* framebuffers);
void RunInputDeleteProgram(RunInputuint program);
void RunInputDeleteRenderbuffers(RunInputsizei n, const(RunInputuint)* renderbuffers);
void RunInputDeleteShader(RunInputuint shader);
void RunInputDeleteTextures(RunInputsizei n, const(RunInputuint)* textures);
void RunInputDepthFunc(RunInputenum func);
void RunInputDepthMask(RunInputboolean flag);
void RunInputDepthRangef(RunInputfloat n, RunInputfloat f);
void RunInputDetachShader(RunInputuint program, RunInputuint shader);
void RunInputDisable(RunInputenum cap);
void RunInputDisableVertexAttribArray(RunInputuint index);
void RunInputDrawArrays(RunInputenum mode, RunInputint first, RunInputsizei count);
void RunInputDrawElements(RunInputenum mode, RunInputsizei count, RunInputenum type, const(RunInputvoid)* indices);
void RunInputEnable(RunInputenum cap);
void RunInputEnableVertexAttribArray(RunInputuint index);
void RunInputFinish();
void RunInputFlush();
void RunInputFramebufferRenderbuffer(RunInputenum target, RunInputenum attachment, RunInputenum renderbuffertarget, RunInputuint renderbuffer);
void RunInputFramebufferTexture2D(RunInputenum target, RunInputenum attachment, RunInputenum textarget, RunInputuint texture, RunInputint level);
void RunInputFrontFace(RunInputenum mode);
void RunInputGenBuffers(RunInputsizei n, RunInputuint* buffers);
void RunInputGenerateMipmap(RunInputenum target);
void RunInputGenFramebuffers(RunInputsizei n, RunInputuint* framebuffers);
void RunInputGenRenderbuffers(RunInputsizei n, RunInputuint* renderbuffers);
void RunInputGenTextures(RunInputsizei n, RunInputuint* textures);
void RunInputGetActiveAttrib(RunInputuint program, RunInputuint index, RunInputsizei bufsize, RunInputsizei* length, RunInputint* size, RunInputenum* type, RunInputchar* name);
void RunInputGetActiveUniform(RunInputuint program, RunInputuint index, RunInputsizei bufsize, RunInputsizei* length, RunInputint* size, RunInputenum* type, RunInputchar* name);
void RunInputGetAttachedShaders(RunInputuint program, RunInputsizei maxcount, RunInputsizei* count, RunInputuint* shaders);
RunInputint RunInputGetAttribLocation(RunInputuint program, const(RunInputchar)* name);
void RunInputGetBooleanv(RunInputenum pname, RunInputboolean* params);
void RunInputGetBufferParameteriv(RunInputenum target, RunInputenum pname, RunInputint* params);
RunInputenum RunInputGetError();
void RunInputGetFloatv(RunInputenum pname, RunInputfloat* params);
void RunInputGetFramebufferAttachmentParameteriv(RunInputenum target, RunInputenum attachment, RunInputenum pname, RunInputint* params);
void RunInputGetIntegerv(RunInputenum pname, RunInputint* params);
void RunInputGetProgramiv(RunInputuint program, RunInputenum pname, RunInputint* params);
void RunInputGetProgramInfoLog(RunInputuint program, RunInputsizei bufsize, RunInputsizei* length, RunInputchar* infolog);
void RunInputGetRenderbufferParameteriv(RunInputenum target, RunInputenum pname, RunInputint* params);
void RunInputGetShaderiv(RunInputuint shader, RunInputenum pname, RunInputint* params);
void RunInputGetShaderInfoLog(RunInputuint shader, RunInputsizei bufsize, RunInputsizei* length, RunInputchar* infolog);
void RunInputGetShaderPrecisionFormat(RunInputenum shadertype, RunInputenum precisiontype, RunInputint* range, RunInputint* precision);
void RunInputGetShaderSource(RunInputuint shader, RunInputsizei bufsize, RunInputsizei* length, RunInputchar* source);
const(RunInputubyte)* RunInputGetString(RunInputenum name);
void RunInputGetTexParameterfv(RunInputenum target, RunInputenum pname, RunInputfloat* params);
void RunInputGetTexParameteriv(RunInputenum target, RunInputenum pname, RunInputint* params);
void RunInputGetUniformfv(RunInputuint program, RunInputint location, RunInputfloat* params);
void RunInputGetUniformiv(RunInputuint program, RunInputint location, RunInputint* params);
RunInputint RunInputGetUniformLocation(RunInputuint program, const(RunInputchar)* name);
void RunInputGetVertexAttribfv(RunInputuint index, RunInputenum pname, RunInputfloat* params);
void RunInputGetVertexAttribiv(RunInputuint index, RunInputenum pname, RunInputint* params);
void RunInputGetVertexAttribPointerv(RunInputuint index, RunInputenum pname, RunInputvoid** pointer);
void RunInputHint(RunInputenum target, RunInputenum mode);
RunInputboolean RunInputIsBuffer(RunInputuint buffer);
RunInputboolean RunInputIsEnabled(RunInputenum cap);
RunInputboolean RunInputIsFramebuffer(RunInputuint framebuffer);
RunInputboolean RunInputIsProgram(RunInputuint program);
RunInputboolean RunInputIsRenderbuffer(RunInputuint renderbuffer);
RunInputboolean RunInputIsShader(RunInputuint shader);
RunInputboolean RunInputIsTexture(RunInputuint texture);
void RunInputLineWidth(RunInputfloat width);
void RunInputLinkProgram(RunInputuint program);
void RunInputPixelStorei(RunInputenum pname, RunInputint param);
void RunInputPolygonOffset(RunInputfloat factor, RunInputfloat units);
void RunInputReadPixels(RunInputint x, RunInputint y, RunInputsizei width, RunInputsizei height, RunInputenum format, RunInputenum type, RunInputvoid* pixels);
void RunInputReleaseShaderCompiler();
void RunInputRenderbufferStorage(RunInputenum target, RunInputenum internalformat, RunInputsizei width, RunInputsizei height);
void RunInputSampleCoverage(RunInputfloat value, RunInputboolean invert);
void RunInputScissor(RunInputint x, RunInputint y, RunInputsizei width, RunInputsizei height);
void RunInputShaderBinary(RunInputsizei n, const(RunInputuint)* shaders, RunInputenum binaryformat, const(RunInputvoid)* binary, RunInputsizei length);
void RunInputShaderSource(RunInputuint shader, RunInputsizei count, const(RunInputchar*)* string, const(RunInputint)* length);
void RunInputStencilFunc(RunInputenum func, RunInputint ref_, RunInputuint mask);
void RunInputStencilFuncSeparate(RunInputenum face, RunInputenum func, RunInputint ref_, RunInputuint mask);
void RunInputStencilMask(RunInputuint mask);
void RunInputStencilMaskSeparate(RunInputenum face, RunInputuint mask);
void RunInputStencilOp(RunInputenum fail, RunInputenum zfail, RunInputenum zpass);
void RunInputStencilOpSeparate(RunInputenum face, RunInputenum fail, RunInputenum zfail, RunInputenum zpass);
void RunInputTexImage2D(RunInputenum target, RunInputint level, RunInputint internalformat, RunInputsizei width, RunInputsizei height, RunInputint border, RunInputenum format, RunInputenum type, const(RunInputvoid)* pixels);
void RunInputTexParameterf(RunInputenum target, RunInputenum pname, RunInputfloat param);
void RunInputTexParameterfv(RunInputenum target, RunInputenum pname, const(RunInputfloat)* params);
void RunInputTexParameteri(RunInputenum target, RunInputenum pname, RunInputint param);
void RunInputTexParameteriv(RunInputenum target, RunInputenum pname, const(RunInputint)* params);
void RunInputTexSubImage2D(RunInputenum target, RunInputint level, RunInputint xoffset, RunInputint yoffset, RunInputsizei width, RunInputsizei height, RunInputenum format, RunInputenum type, const(RunInputvoid)* pixels);
void RunInputUniform1f(RunInputint location, RunInputfloat x);
void RunInputUniform1fv(RunInputint location, RunInputsizei count, const(RunInputfloat)* v);
void RunInputUniform1i(RunInputint location, RunInputint x);
void RunInputUniform1iv(RunInputint location, RunInputsizei count, const(RunInputint)* v);
void RunInputUniform2f(RunInputint location, RunInputfloat x, RunInputfloat y);
void RunInputUniform2fv(RunInputint location, RunInputsizei count, const(RunInputfloat)* v);
void RunInputUniform2i(RunInputint location, RunInputint x, RunInputint y);
void RunInputUniform2iv(RunInputint location, RunInputsizei count, const(RunInputint)* v);
void RunInputUniform3f(RunInputint location, RunInputfloat x, RunInputfloat y, RunInputfloat z);
void RunInputUniform3fv(RunInputint location, RunInputsizei count, const(RunInputfloat)* v);
void RunInputUniform3i(RunInputint location, RunInputint x, RunInputint y, RunInputint z);
void RunInputUniform3iv(RunInputint location, RunInputsizei count, const(RunInputint)* v);
void RunInputUniform4f(RunInputint location, RunInputfloat x, RunInputfloat y, RunInputfloat z, RunInputfloat w);
void RunInputUniform4fv(RunInputint location, RunInputsizei count, const(RunInputfloat)* v);
void RunInputUniform4i(RunInputint location, RunInputint x, RunInputint y, RunInputint z, RunInputint w);
void RunInputUniform4iv(RunInputint location, RunInputsizei count, const(RunInputint)* v);
void RunInputUniformMatrix2fv(RunInputint location, RunInputsizei count, RunInputboolean transpose, const(RunInputfloat)* value);
void RunInputUniformMatrix3fv(RunInputint location, RunInputsizei count, RunInputboolean transpose, const(RunInputfloat)* value);
void RunInputUniformMatrix4fv(RunInputint location, RunInputsizei count, RunInputboolean transpose, const(RunInputfloat)* value);
void RunInputUseProgram(RunInputuint program);
void RunInputValidateProgram(RunInputuint program);
void RunInputVertexAttrib1f(RunInputuint indx, RunInputfloat x);
void RunInputVertexAttrib1fv(RunInputuint indx, const(RunInputfloat)* values);
void RunInputVertexAttrib2f(RunInputuint indx, RunInputfloat x, RunInputfloat y);
void RunInputVertexAttrib2fv(RunInputuint indx, const(RunInputfloat)* values);
void RunInputVertexAttrib3f(RunInputuint indx, RunInputfloat x, RunInputfloat y, RunInputfloat z);
void RunInputVertexAttrib3fv(RunInputuint indx, const(RunInputfloat)* values);
void RunInputVertexAttrib4f(RunInputuint indx, RunInputfloat x, RunInputfloat y, RunInputfloat z, RunInputfloat w);
void RunInputVertexAttrib4fv(RunInputuint indx, const(RunInputfloat)* values);
void RunInputVertexAttribPointer(RunInputuint indx, RunInputint size, RunInputenum type, RunInputboolean normalized, RunInputsizei stride, const(RunInputvoid)* ptr);
void RunInputViewport(RunInputint x, RunInputint y, RunInputsizei width, RunInputsizei height);
void RunInputReadBuffer(RunInputenum mode);
void RunInputDrawRangeElements(RunInputenum mode, RunInputuint start, RunInputuint end, RunInputsizei count, RunInputenum type, const(RunInputvoid)* indices);
void RunInputTexImage3D(RunInputenum target, RunInputint level, RunInputint internalformat, RunInputsizei width, RunInputsizei height, RunInputsizei depth, RunInputint border, RunInputenum format, RunInputenum type, const(RunInputvoid)* pixels);
void RunInputTexSubImage3D(RunInputenum target, RunInputint level, RunInputint xoffset, RunInputint yoffset, RunInputint zoffset, RunInputsizei width, RunInputsizei height, RunInputsizei depth, RunInputenum format, RunInputenum type, const(RunInputvoid)* pixels);
void RunInputCopyTexSubImage3D(RunInputenum target, RunInputint level, RunInputint xoffset, RunInputint yoffset, RunInputint zoffset, RunInputint x, RunInputint y, RunInputsizei width, RunInputsizei height);
void RunInputCompressedTexImage3D(RunInputenum target, RunInputint level, RunInputenum internalformat, RunInputsizei width, RunInputsizei height, RunInputsizei depth, RunInputint border, RunInputsizei imageSize, const(RunInputvoid)* data);
void RunInputCompressedTexSubImage3D(RunInputenum target, RunInputint level, RunInputint xoffset, RunInputint yoffset, RunInputint zoffset, RunInputsizei width, RunInputsizei height, RunInputsizei depth, RunInputenum format, RunInputsizei imageSize, const(RunInputvoid)* data);
void RunInputGenQueries(RunInputsizei n, RunInputuint* ids);
void RunInputDeleteQueries(RunInputsizei n, const(RunInputuint)* ids);
RunInputboolean RunInputIsQuery(RunInputuint id);
void RunInputBeginQuery(RunInputenum target, RunInputuint id);
void RunInputEndQuery(RunInputenum target);
void RunInputGetQueryiv(RunInputenum target, RunInputenum pname, RunInputint* params);
void RunInputGetQueryObjectuiv(RunInputuint id, RunInputenum pname, RunInputuint* params);
RunInputboolean RunInputUnmapBuffer(RunInputenum target);
void RunInputGetBufferPointerv(RunInputenum target, RunInputenum pname, RunInputvoid** params);
void RunInputDrawBuffers(RunInputsizei n, const(RunInputenum)* bufs);
void RunInputUniformMatrix2x3fv(RunInputint location, RunInputsizei count, RunInputboolean transpose, const(RunInputfloat)* value);
void RunInputUniformMatrix3x2fv(RunInputint location, RunInputsizei count, RunInputboolean transpose, const(RunInputfloat)* value);
void RunInputUniformMatrix2x4fv(RunInputint location, RunInputsizei count, RunInputboolean transpose, const(RunInputfloat)* value);
void RunInputUniformMatrix4x2fv(RunInputint location, RunInputsizei count, RunInputboolean transpose, const(RunInputfloat)* value);
void RunInputUniformMatrix3x4fv(RunInputint location, RunInputsizei count, RunInputboolean transpose, const(RunInputfloat)* value);
void RunInputUniformMatrix4x3fv(RunInputint location, RunInputsizei count, RunInputboolean transpose, const(RunInputfloat)* value);
void RunInputBlitFramebuffer(RunInputint srcX0, RunInputint srcY0, RunInputint srcX1, RunInputint srcY1, RunInputint dstX0, RunInputint dstY0, RunInputint dstX1, RunInputint dstY1, RunInputbitfield mask, RunInputenum filter);
void RunInputRenderbufferStorageMultisample(RunInputenum target, RunInputsizei samples, RunInputenum internalformat, RunInputsizei width, RunInputsizei height);
void RunInputFramebufferTextureLayer(RunInputenum target, RunInputenum attachment, RunInputuint texture, RunInputint level, RunInputint layer);
RunInputvoid* RunInputMapBufferRange(RunInputenum target, RunInputintptr offset, RunInputsizeiptr length, RunInputbitfield access);
void RunInputFlushMappedBufferRange(RunInputenum target, RunInputintptr offset, RunInputsizeiptr length);
void RunInputBindVertexArray(RunInputuint array);
void RunInputDeleteVertexArrays(RunInputsizei n, const(RunInputuint)* arrays);
void RunInputGenVertexArrays(RunInputsizei n, RunInputuint* arrays);
RunInputboolean RunInputIsVertexArray(RunInputuint array);
void RunInputGetIntegeri_v(RunInputenum target, RunInputuint index, RunInputint* data);
void RunInputBeginTransformFeedback(RunInputenum primitiveMode);
void RunInputEndTransformFeedback();
void RunInputBindBufferRange(RunInputenum target, RunInputuint index, RunInputuint buffer, RunInputintptr offset, RunInputsizeiptr size);
void RunInputBindBufferBase(RunInputenum target, RunInputuint index, RunInputuint buffer);
void RunInputTransformFeedbackVaryings(RunInputuint program, RunInputsizei count, const(RunInputchar*)* varyings, RunInputenum bufferMode);
void RunInputGetTransformFeedbackVarying(RunInputuint program, RunInputuint index, RunInputsizei bufSize, RunInputsizei* length, RunInputsizei* size, RunInputenum* type, RunInputchar* name);
void RunInputVertexAttribIPointer(RunInputuint index, RunInputint size, RunInputenum type, RunInputsizei stride, const(RunInputvoid)* pointer);
void RunInputGetVertexAttribIiv(RunInputuint index, RunInputenum pname, RunInputint* params);
void RunInputGetVertexAttribIuiv(RunInputuint index, RunInputenum pname, RunInputuint* params);
void RunInputVertexAttribI4i(RunInputuint index, RunInputint x, RunInputint y, RunInputint z, RunInputint w);
void RunInputVertexAttribI4ui(RunInputuint index, RunInputuint x, RunInputuint y, RunInputuint z, RunInputuint w);
void RunInputVertexAttribI4iv(RunInputuint index, const(RunInputint)* v);
void RunInputVertexAttribI4uiv(RunInputuint index, const(RunInputuint)* v);
void RunInputGetUniformuiv(RunInputuint program, RunInputint location, RunInputuint* params);
RunInputint RunInputGetFragDataLocation(RunInputuint program, const(RunInputchar)* name);
void RunInputUniform1ui(RunInputint location, RunInputuint v0);
void RunInputUniform2ui(RunInputint location, RunInputuint v0, RunInputuint v1);
void RunInputUniform3ui(RunInputint location, RunInputuint v0, RunInputuint v1, RunInputuint v2);
void RunInputUniform4ui(RunInputint location, RunInputuint v0, RunInputuint v1, RunInputuint v2, RunInputuint v3);
void RunInputUniform1uiv(RunInputint location, RunInputsizei count, const(RunInputuint)* value);
void RunInputUniform2uiv(RunInputint location, RunInputsizei count, const(RunInputuint)* value);
void RunInputUniform3uiv(RunInputint location, RunInputsizei count, const(RunInputuint)* value);
void RunInputUniform4uiv(RunInputint location, RunInputsizei count, const(RunInputuint)* value);
void RunInputClearBufferiv(RunInputenum buffer, RunInputint drawbuffer, const(RunInputint)* value);
void RunInputClearBufferuiv(RunInputenum buffer, RunInputint drawbuffer, const(RunInputuint)* value);
void RunInputClearBufferfv(RunInputenum buffer, RunInputint drawbuffer, const(RunInputfloat)* value);
void RunInputClearBufferfi(RunInputenum buffer, RunInputint drawbuffer, RunInputfloat depth, RunInputint stencil);
const(RunInputubyte)* RunInputGetStringi(RunInputenum name, RunInputuint index);
void RunInputCopyBufferSubData(RunInputenum readTarget, RunInputenum writeTarget, RunInputintptr readOffset, RunInputintptr writeOffset, RunInputsizeiptr size);
void RunInputGetUniformIndices(RunInputuint program, RunInputsizei uniformCount, const(RunInputchar*)* uniformNames, RunInputuint* uniformIndices);
void RunInputGetActiveUniformsiv(RunInputuint program, RunInputsizei uniformCount, const(RunInputuint)* uniformIndices, RunInputenum pname, RunInputint* params);
RunInputuint RunInputGetUniformBlockIndex(RunInputuint program, const(RunInputchar)* uniformBlockName);
void RunInputGetActiveUniformBlockiv(RunInputuint program, RunInputuint uniformBlockIndex, RunInputenum pname, RunInputint* params);
void RunInputGetActiveUniformBlockName(RunInputuint program, RunInputuint uniformBlockIndex, RunInputsizei bufSize, RunInputsizei* length, RunInputchar* uniformBlockName);
void RunInputUniformBlockBinding(RunInputuint program, RunInputuint uniformBlockIndex, RunInputuint uniformBlockBinding);
void RunInputDrawArraysInstanced(RunInputenum mode, RunInputint first, RunInputsizei count, RunInputsizei instanceCount);
void RunInputDrawElementsInstanced(RunInputenum mode, RunInputsizei count, RunInputenum type, const(RunInputvoid)* indices, RunInputsizei instanceCount);
RunInputsync RunInputFenceSync(RunInputenum condition, RunInputbitfield flags);
RunInputboolean RunInputIsSync(RunInputsync sync);
void RunInputDeleteSync(RunInputsync sync);
RunInputenum RunInputClientWaitSync(RunInputsync sync, RunInputbitfield flags, RunInputuint64 timeout);
void RunInputWaitSync(RunInputsync sync, RunInputbitfield flags, RunInputuint64 timeout);
void RunInputGetInteger64v(RunInputenum pname, RunInputint64* params);
void RunInputGetSynciv(RunInputsync sync, RunInputenum pname, RunInputsizei bufSize, RunInputsizei* length, RunInputint* values);
void RunInputGetInteger64i_v(RunInputenum target, RunInputuint index, RunInputint64* data);
void RunInputGetBufferParameteri64v(RunInputenum target, RunInputenum pname, RunInputint64* params);
void RunInputGenSamplers(RunInputsizei count, RunInputuint* samplers);
void RunInputDeleteSamplers(RunInputsizei count, const(RunInputuint)* samplers);
RunInputboolean RunInputIsSampler(RunInputuint sampler);
void RunInputBindSampler(RunInputuint unit, RunInputuint sampler);
void RunInputSamplerParameteri(RunInputuint sampler, RunInputenum pname, RunInputint param);
void RunInputSamplerParameteriv(RunInputuint sampler, RunInputenum pname, const(RunInputint)* param);
void RunInputSamplerParameterf(RunInputuint sampler, RunInputenum pname, RunInputfloat param);
void RunInputSamplerParameterfv(RunInputuint sampler, RunInputenum pname, const(RunInputfloat)* param);
void RunInputGetSamplerParameteriv(RunInputuint sampler, RunInputenum pname, RunInputint* params);
void RunInputGetSamplerParameterfv(RunInputuint sampler, RunInputenum pname, RunInputfloat* params);
void RunInputVertexAttribDivisor(RunInputuint index, RunInputuint divisor);
void RunInputBindTransformFeedback(RunInputenum target, RunInputuint id);
void RunInputDeleteTransformFeedbacks(RunInputsizei n, const(RunInputuint)* ids);
void RunInputGenTransformFeedbacks(RunInputsizei n, RunInputuint* ids);
RunInputboolean RunInputIsTransformFeedback(RunInputuint id);
void RunInputPauseTransformFeedback();
void RunInputResumeTransformFeedback();
void RunInputGetProgramBinary(RunInputuint program, RunInputsizei bufSize, RunInputsizei* length, RunInputenum* binaryFormat, RunInputvoid* binary);
void RunInputProgramBinary(RunInputuint program, RunInputenum binaryFormat, const(RunInputvoid)* binary, RunInputsizei length);
void RunInputProgramParameteri(RunInputuint program, RunInputenum pname, RunInputint value);
void RunInputInvalidateFramebuffer(RunInputenum target, RunInputsizei numAttachments, const(RunInputenum)* attachments);
void RunInputInvalidateSubFramebuffer(RunInputenum target, RunInputsizei numAttachments, const(RunInputenum)* attachments, RunInputint x, RunInputint y, RunInputsizei width, RunInputsizei height);
void RunInputTexStorage2D(RunInputenum target, RunInputsizei levels, RunInputenum internalformat, RunInputsizei width, RunInputsizei height);
void RunInputTexStorage3D(RunInputenum target, RunInputsizei levels, RunInputenum internalformat, RunInputsizei width, RunInputsizei height, RunInputsizei depth);
void RunInputGetInternalformativ(RunInputenum target, RunInputenum internalformat, RunInputenum pname, RunInputsizei bufSize, RunInputint* params);
