module continues.arms.play;

version (ARM):
extern (D):
@system:
nothrow:
@nogc:

alias void ArmPlayvoid;
alias char ArmPlaychar;
alias uint ArmPlayenum;
alias ubyte ArmPlayboolean;
alias uint ArmPlaybitfield;
alias byte ArmPlaybyte;
alias short ArmPlayshort;
alias int ArmPlayint;
alias int ArmPlaysizei;
alias ubyte ArmPlayubyte;
alias ushort ArmPlayushort;
alias uint ArmPlayuint;
alias float ArmPlayfloat;
alias float ArmPlayclampf;
alias int ArmPlayfixed;
alias c_long ArmPlayintptr;
alias c_long ArmPlaysizeiptr;

enum ArmPlay_ES_VERSION_2_0 =                 1;
enum ArmPlay_DEPTH_BUFFER_BIT =               0x00000100;
enum ArmPlay_STENCIL_BUFFER_BIT =             0x00000400;
enum ArmPlay_COLOR_BUFFER_BIT =               0x00004000;
enum ArmPlay_FALSE =                          0;
enum ArmPlay_TRUE =                           1;
enum ArmPlay_POINTS =                         0x0000;
enum ArmPlay_LINES =                          0x0001;
enum ArmPlay_LINE_LOOP =                      0x0002;
enum ArmPlay_LINE_STRIP =                     0x0003;
enum ArmPlay_TRIANArmPlayES =                      0x0004;
enum ArmPlay_TRIANArmPlayE_STRIP =                 0x0005;
enum ArmPlay_TRIANArmPlayE_FAN =                   0x0006;
enum ArmPlay_ZERO =                           0;
enum ArmPlay_ONE =                            1;
enum ArmPlay_SRC_COLOR =                      0x0300;
enum ArmPlay_ONE_MINUS_SRC_COLOR =            0x0301;
enum ArmPlay_SRC_ALPHA =                      0x0302;
enum ArmPlay_ONE_MINUS_SRC_ALPHA =            0x0303;
enum ArmPlay_DST_ALPHA =                      0x0304;
enum ArmPlay_ONE_MINUS_DST_ALPHA =            0x0305;
enum ArmPlay_DST_COLOR =                      0x0306;
enum ArmPlay_ONE_MINUS_DST_COLOR =            0x0307;
enum ArmPlay_SRC_ALPHA_SATURATE =             0x0308;
enum ArmPlay_FUNC_ADD =                       0x8006;
enum ArmPlay_BLEND_EQUATION =                 0x8009;
enum ArmPlay_BLEND_EQUATION_RGB =             0x8009;
enum ArmPlay_BLEND_EQUATION_ALPHA =           0x883D;
enum ArmPlay_FUNC_SUBTRACT =                  0x800A;
enum ArmPlay_FUNC_REVERSE_SUBTRACT =          0x800B;
enum ArmPlay_BLEND_DST_RGB =                  0x80C8;
enum ArmPlay_BLEND_SRC_RGB =                  0x80C9;
enum ArmPlay_BLEND_DST_ALPHA =                0x80CA;
enum ArmPlay_BLEND_SRC_ALPHA =                0x80CB;
enum ArmPlay_CONSTANT_COLOR =                 0x8001;
enum ArmPlay_ONE_MINUS_CONSTANT_COLOR =       0x8002;
enum ArmPlay_CONSTANT_ALPHA =                 0x8003;
enum ArmPlay_ONE_MINUS_CONSTANT_ALPHA =       0x8004;
enum ArmPlay_BLEND_COLOR =                    0x8005;
enum ArmPlay_ARRAY_BUFFER =                   0x8892;
enum ArmPlay_ELEMENT_ARRAY_BUFFER =           0x8893;
enum ArmPlay_ARRAY_BUFFER_BINDING =           0x8894;
enum ArmPlay_ELEMENT_ARRAY_BUFFER_BINDING =   0x8895;
enum ArmPlay_STREAM_DRAW =                    0x88E0;
enum ArmPlay_STATIC_DRAW =                    0x88E4;
enum ArmPlay_DYNAMIC_DRAW =                   0x88E8;
enum ArmPlay_BUFFER_SIZE =                    0x8764;
enum ArmPlay_BUFFER_USAGE =                   0x8765;
enum ArmPlay_CURRENT_VERTEX_ATTRIB =          0x8626;
enum ArmPlay_FRONT =                          0x0404;
enum ArmPlay_BACK =                           0x0405;
enum ArmPlay_FRONT_AND_BACK =                 0x0408;
enum ArmPlay_TEXTURE_2D =                     0x0DE1;
enum ArmPlay_CULL_FACE =                      0x0B44;
enum ArmPlay_BLEND =                          0x0BE2;
enum ArmPlay_DITHER =                         0x0BD0;
enum ArmPlay_STENCIL_TEST =                   0x0B90;
enum ArmPlay_DEPTH_TEST =                     0x0B71;
enum ArmPlay_SCISSOR_TEST =                   0x0C11;
enum ArmPlay_POLYGON_OFFSET_FILL =            0x8037;
enum ArmPlay_SAMPLE_ALPHA_TO_COVERAGE =       0x809E;
enum ArmPlay_SAMPLE_COVERAGE =                0x80A0;
enum ArmPlay_NO_ERROR =                       0;
enum ArmPlay_INVALID_ENUM =                   0x0500;
enum ArmPlay_INVALID_VALUE =                  0x0501;
enum ArmPlay_INVALID_OPERATION =              0x0502;
enum ArmPlay_OUT_OF_MEMORY =                  0x0505;
enum ArmPlay_CW =                             0x0900;
enum ArmPlay_CCW =                            0x0901;
enum ArmPlay_LINE_WIDTH =                     0x0B21;
enum ArmPlay_ALIASED_POINT_SIZE_RANGE =       0x846D;
enum ArmPlay_ALIASED_LINE_WIDTH_RANGE =       0x846E;
enum ArmPlay_CULL_FACE_MODE =                 0x0B45;
enum ArmPlay_FRONT_FACE =                     0x0B46;
enum ArmPlay_DEPTH_RANGE =                    0x0B70;
enum ArmPlay_DEPTH_WRITEMASK =                0x0B72;
enum ArmPlay_DEPTH_CLEAR_VALUE =              0x0B73;
enum ArmPlay_DEPTH_FUNC =                     0x0B74;
enum ArmPlay_STENCIL_CLEAR_VALUE =            0x0B91;
enum ArmPlay_STENCIL_FUNC =                   0x0B92;
enum ArmPlay_STENCIL_FAIL =                   0x0B94;
enum ArmPlay_STENCIL_PASS_DEPTH_FAIL =        0x0B95;
enum ArmPlay_STENCIL_PASS_DEPTH_PASS =        0x0B96;
enum ArmPlay_STENCIL_REF =                    0x0B97;
enum ArmPlay_STENCIL_VALUE_MASK =             0x0B93;
enum ArmPlay_STENCIL_WRITEMASK =              0x0B98;
enum ArmPlay_STENCIL_BACK_FUNC =              0x8800;
enum ArmPlay_STENCIL_BACK_FAIL =              0x8801;
enum ArmPlay_STENCIL_BACK_PASS_DEPTH_FAIL =   0x8802;
enum ArmPlay_STENCIL_BACK_PASS_DEPTH_PASS =   0x8803;
enum ArmPlay_STENCIL_BACK_REF =               0x8CA3;
enum ArmPlay_STENCIL_BACK_VALUE_MASK =        0x8CA4;
enum ArmPlay_STENCIL_BACK_WRITEMASK =         0x8CA5;
enum ArmPlay_VIEWPORT =                       0x0BA2;
enum ArmPlay_SCISSOR_BOX =                    0x0C10;
enum ArmPlay_COLOR_CLEAR_VALUE =              0x0C22;
enum ArmPlay_COLOR_WRITEMASK =                0x0C23;
enum ArmPlay_UNPACK_ALIGNMENT =               0x0CF5;
enum ArmPlay_PACK_ALIGNMENT =                 0x0D05;
enum ArmPlay_MAX_TEXTURE_SIZE =               0x0D33;
enum ArmPlay_MAX_VIEWPORT_DIMS =              0x0D3A;
enum ArmPlay_SUBPIXEL_BITS =                  0x0D50;
enum ArmPlay_RED_BITS =                       0x0D52;
enum ArmPlay_GREEN_BITS =                     0x0D53;
enum ArmPlay_BLUE_BITS =                      0x0D54;
enum ArmPlay_ALPHA_BITS =                     0x0D55;
enum ArmPlay_DEPTH_BITS =                     0x0D56;
enum ArmPlay_STENCIL_BITS =                   0x0D57;
enum ArmPlay_POLYGON_OFFSET_UNITS =           0x2A00;
enum ArmPlay_POLYGON_OFFSET_FACTOR =          0x8038;
enum ArmPlay_TEXTURE_BINDING_2D =             0x8069;
enum ArmPlay_SAMPLE_BUFFERS =                 0x80A8;
enum ArmPlay_SAMPLES =                        0x80A9;
enum ArmPlay_SAMPLE_COVERAGE_VALUE =          0x80AA;
enum ArmPlay_SAMPLE_COVERAGE_INVERT =         0x80AB;
enum ArmPlay_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
enum ArmPlay_COMPRESSED_TEXTURE_FORMATS =     0x86A3;
enum ArmPlay_DONT_CARE =                      0x1100;
enum ArmPlay_FASTEST =                        0x1101;
enum ArmPlay_NICEST =                         0x1102;
enum ArmPlay_GENERATE_MIPMAP_HINT =           0x8192;
enum ArmPlay_BYTE =                           0x1400;
enum ArmPlay_UNSIGNED_BYTE =                  0x1401;
enum ArmPlay_SHORT =                          0x1402;
enum ArmPlay_UNSIGNED_SHORT =                 0x1403;
enum ArmPlay_INT =                            0x1404;
enum ArmPlay_UNSIGNED_INT =                   0x1405;
enum ArmPlay_FLOAT =                          0x1406;
enum ArmPlay_FIXED =                          0x140C;
enum ArmPlay_DEPTH_COMPONENT =                0x1902;
enum ArmPlay_ALPHA =                          0x1906;
enum ArmPlay_RGB =                            0x1907;
enum ArmPlay_RGBA =                           0x1908;
enum ArmPlay_LUMINANCE =                      0x1909;
enum ArmPlay_LUMINANCE_ALPHA =                0x190A;
enum ArmPlay_UNSIGNED_SHORT_4_4_4_4 =         0x8033;
enum ArmPlay_UNSIGNED_SHORT_5_5_5_1 =         0x8034;
enum ArmPlay_UNSIGNED_SHORT_5_6_5 =           0x8363;
enum ArmPlay_FRAGMENT_SHADER =                  0x8B30;
enum ArmPlay_VERTEX_SHADER =                    0x8B31;
enum ArmPlay_MAX_VERTEX_ATTRIBS =               0x8869;
enum ArmPlay_MAX_VERTEX_UNIFORM_VECTORS =       0x8DFB;
enum ArmPlay_MAX_VARYING_VECTORS =              0x8DFC;
enum ArmPlay_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
enum ArmPlay_MAX_VERTEX_TEXTURE_IMAGE_UNITS =   0x8B4C;
enum ArmPlay_MAX_TEXTURE_IMAGE_UNITS =          0x8872;
enum ArmPlay_MAX_FRAGMENT_UNIFORM_VECTORS =     0x8DFD;
enum ArmPlay_SHADER_TYPE =                      0x8B4F;
enum ArmPlay_DELETE_STATUS =                    0x8B80;
enum ArmPlay_LINK_STATUS =                      0x8B82;
enum ArmPlay_VALIDATE_STATUS =                  0x8B83;
enum ArmPlay_ATTACHED_SHADERS =                 0x8B85;
enum ArmPlay_ACTIVE_UNIFORMS =                  0x8B86;
enum ArmPlay_ACTIVE_UNIFORM_MAX_LENGTH =        0x8B87;
enum ArmPlay_ACTIVE_ATTRIBUTES =                0x8B89;
enum ArmPlay_ACTIVE_ATTRIBUTE_MAX_LENGTH =      0x8B8A;
enum ArmPlay_SHADING_LANGUAGE_VERSION =         0x8B8C;
enum ArmPlay_CURRENT_PROGRAM =                  0x8B8D;
enum ArmPlay_NEVER =                          0x0200;
enum ArmPlay_LESS =                           0x0201;
enum ArmPlay_EQUAL =                          0x0202;
enum ArmPlay_LEQUAL =                         0x0203;
enum ArmPlay_GREATER =                        0x0204;
enum ArmPlay_NOTEQUAL =                       0x0205;
enum ArmPlay_GEQUAL =                         0x0206;
enum ArmPlay_ALWAYS =                         0x0207;
enum ArmPlay_KEEP =                           0x1E00;
enum ArmPlay_REPLACE =                        0x1E01;
enum ArmPlay_INCR =                           0x1E02;
enum ArmPlay_DECR =                           0x1E03;
enum ArmPlay_INVERT =                         0x150A;
enum ArmPlay_INCR_WRAP =                      0x8507;
enum ArmPlay_DECR_WRAP =                      0x8508;
enum ArmPlay_VENDOR =                         0x1F00;
enum ArmPlay_RENDERER =                       0x1F01;
enum ArmPlay_VERSION =                        0x1F02;
enum ArmPlay_EXTENSIONS =                     0x1F03;
enum ArmPlay_NEAREST =                        0x2600;
enum ArmPlay_LINEAR =                         0x2601;
enum ArmPlay_NEAREST_MIPMAP_NEAREST =         0x2700;
enum ArmPlay_LINEAR_MIPMAP_NEAREST =          0x2701;
enum ArmPlay_NEAREST_MIPMAP_LINEAR =          0x2702;
enum ArmPlay_LINEAR_MIPMAP_LINEAR =           0x2703;
enum ArmPlay_TEXTURE_MAG_FILTER =             0x2800;
enum ArmPlay_TEXTURE_MIN_FILTER =             0x2801;
enum ArmPlay_TEXTURE_WRAP_S =                 0x2802;
enum ArmPlay_TEXTURE_WRAP_T =                 0x2803;
enum ArmPlay_TEXTURE =                        0x1702;
enum ArmPlay_TEXTURE_CUBE_MAP =               0x8513;
enum ArmPlay_TEXTURE_BINDING_CUBE_MAP =       0x8514;
enum ArmPlay_TEXTURE_CUBE_MAP_POSITIVE_X =    0x8515;
enum ArmPlay_TEXTURE_CUBE_MAP_NEGATIVE_X =    0x8516;
enum ArmPlay_TEXTURE_CUBE_MAP_POSITIVE_Y =    0x8517;
enum ArmPlay_TEXTURE_CUBE_MAP_NEGATIVE_Y =    0x8518;
enum ArmPlay_TEXTURE_CUBE_MAP_POSITIVE_Z =    0x8519;
enum ArmPlay_TEXTURE_CUBE_MAP_NEGATIVE_Z =    0x851A;
enum ArmPlay_MAX_CUBE_MAP_TEXTURE_SIZE =      0x851C;
enum ArmPlay_TEXTURE0 =                       0x84C0;
enum ArmPlay_TEXTURE1 =                       0x84C1;
enum ArmPlay_TEXTURE2 =                       0x84C2;
enum ArmPlay_TEXTURE3 =                       0x84C3;
enum ArmPlay_TEXTURE4 =                       0x84C4;
enum ArmPlay_TEXTURE5 =                       0x84C5;
enum ArmPlay_TEXTURE6 =                       0x84C6;
enum ArmPlay_TEXTURE7 =                       0x84C7;
enum ArmPlay_TEXTURE8 =                       0x84C8;
enum ArmPlay_TEXTURE9 =                       0x84C9;
enum ArmPlay_TEXTURE10 =                      0x84CA;
enum ArmPlay_TEXTURE11 =                      0x84CB;
enum ArmPlay_TEXTURE12 =                      0x84CC;
enum ArmPlay_TEXTURE13 =                      0x84CD;
enum ArmPlay_TEXTURE14 =                      0x84CE;
enum ArmPlay_TEXTURE15 =                      0x84CF;
enum ArmPlay_TEXTURE16 =                      0x84D0;
enum ArmPlay_TEXTURE17 =                      0x84D1;
enum ArmPlay_TEXTURE18 =                      0x84D2;
enum ArmPlay_TEXTURE19 =                      0x84D3;
enum ArmPlay_TEXTURE20 =                      0x84D4;
enum ArmPlay_TEXTURE21 =                      0x84D5;
enum ArmPlay_TEXTURE22 =                      0x84D6;
enum ArmPlay_TEXTURE23 =                      0x84D7;
enum ArmPlay_TEXTURE24 =                      0x84D8;
enum ArmPlay_TEXTURE25 =                      0x84D9;
enum ArmPlay_TEXTURE26 =                      0x84DA;
enum ArmPlay_TEXTURE27 =                      0x84DB;
enum ArmPlay_TEXTURE28 =                      0x84DC;
enum ArmPlay_TEXTURE29 =                      0x84DD;
enum ArmPlay_TEXTURE30 =                      0x84DE;
enum ArmPlay_TEXTURE31 =                      0x84DF;
enum ArmPlay_ACTIVE_TEXTURE =                 0x84E0;
enum ArmPlay_REPEAT =                         0x2901;
enum ArmPlay_CLAMP_TO_EDGE =                  0x812F;
enum ArmPlay_MIRRORED_REPEAT =                0x8370;
enum ArmPlay_FLOAT_VEC2 =                     0x8B50;
enum ArmPlay_FLOAT_VEC3 =                     0x8B51;
enum ArmPlay_FLOAT_VEC4 =                     0x8B52;
enum ArmPlay_INT_VEC2 =                       0x8B53;
enum ArmPlay_INT_VEC3 =                       0x8B54;
enum ArmPlay_INT_VEC4 =                       0x8B55;
enum ArmPlay_BOOL =                           0x8B56;
enum ArmPlay_BOOL_VEC2 =                      0x8B57;
enum ArmPlay_BOOL_VEC3 =                      0x8B58;
enum ArmPlay_BOOL_VEC4 =                      0x8B59;
enum ArmPlay_FLOAT_MAT2 =                     0x8B5A;
enum ArmPlay_FLOAT_MAT3 =                     0x8B5B;
enum ArmPlay_FLOAT_MAT4 =                     0x8B5C;
enum ArmPlay_SAMPLER_2D =                     0x8B5E;
enum ArmPlay_SAMPLER_CUBE =                   0x8B60;
enum ArmPlay_VERTEX_ATTRIB_ARRAY_ENABLED =        0x8622;
enum ArmPlay_VERTEX_ATTRIB_ARRAY_SIZE =           0x8623;
enum ArmPlay_VERTEX_ATTRIB_ARRAY_STRIDE =         0x8624;
enum ArmPlay_VERTEX_ATTRIB_ARRAY_TYPE =           0x8625;
enum ArmPlay_VERTEX_ATTRIB_ARRAY_NORMALIZED =     0x886A;
enum ArmPlay_VERTEX_ATTRIB_ARRAY_POINTER =        0x8645;
enum ArmPlay_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
enum ArmPlay_IMPLEMENTATION_COLOR_READ_TYPE =     0x8B9A;
enum ArmPlay_IMPLEMENTATION_COLOR_READ_FORMAT =   0x8B9B;
enum ArmPlay_COMPILE_STATUS =                 0x8B81;
enum ArmPlay_INFO_LOG_LENGTH =                0x8B84;
enum ArmPlay_SHADER_SOURCE_LENGTH =           0x8B88;
enum ArmPlay_SHADER_COMPILER =                0x8DFA;
enum ArmPlay_SHADER_BINARY_FORMATS =          0x8DF8;
enum ArmPlay_NUM_SHADER_BINARY_FORMATS =      0x8DF9;
enum ArmPlay_LOW_FLOAT =                      0x8DF0;
enum ArmPlay_MEDIUM_FLOAT =                   0x8DF1;
enum ArmPlay_HIGH_FLOAT =                     0x8DF2;
enum ArmPlay_LOW_INT =                        0x8DF3;
enum ArmPlay_MEDIUM_INT =                     0x8DF4;
enum ArmPlay_HIGH_INT =                       0x8DF5;
enum ArmPlay_FRAMEBUFFER =                    0x8D40;
enum ArmPlay_RENDERBUFFER =                   0x8D41;
enum ArmPlay_RGBA4 =                          0x8056;
enum ArmPlay_RGB5_A1 =                        0x8057;
enum ArmPlay_RGB565 =                         0x8D62;
enum ArmPlay_DEPTH_COMPONENT16 =              0x81A5;
enum ArmPlay_STENCIL_INDEX =                  0x1901;
enum ArmPlay_STENCIL_INDEX8 =                 0x8D48;
enum ArmPlay_RENDERBUFFER_WIDTH =             0x8D42;
enum ArmPlay_RENDERBUFFER_HEIGHT =            0x8D43;
enum ArmPlay_RENDERBUFFER_INTERNAL_FORMAT =   0x8D44;
enum ArmPlay_RENDERBUFFER_RED_SIZE =          0x8D50;
enum ArmPlay_RENDERBUFFER_GREEN_SIZE =        0x8D51;
enum ArmPlay_RENDERBUFFER_BLUE_SIZE =         0x8D52;
enum ArmPlay_RENDERBUFFER_ALPHA_SIZE =        0x8D53;
enum ArmPlay_RENDERBUFFER_DEPTH_SIZE =        0x8D54;
enum ArmPlay_RENDERBUFFER_STENCIL_SIZE =      0x8D55;
enum ArmPlay_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE =           0x8CD0;
enum ArmPlay_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME =           0x8CD1;
enum ArmPlay_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL =         0x8CD2;
enum ArmPlay_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
enum ArmPlay_COLOR_ATTACHMENT0 =              0x8CE0;
enum ArmPlay_DEPTH_ATTACHMENT =               0x8D00;
enum ArmPlay_STENCIL_ATTACHMENT =             0x8D20;
enum ArmPlay_NONE =                           0;
enum ArmPlay_FRAMEBUFFER_COMPLETE =                      0x8CD5;
enum ArmPlay_FRAMEBUFFER_INCOMPLETE_ATTACHMENT =         0x8CD6;
enum ArmPlay_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
enum ArmPlay_FRAMEBUFFER_INCOMPLETE_DIMENSIONS =         0x8CD9;
enum ArmPlay_FRAMEBUFFER_UNSUPPORTED =                   0x8CDD;
enum ArmPlay_FRAMEBUFFER_BINDING =            0x8CA6;
enum ArmPlay_RENDERBUFFER_BINDING =           0x8CA7;
enum ArmPlay_MAX_RENDERBUFFER_SIZE =          0x84E8;
enum ArmPlay_INVALID_FRAMEBUFFER_OPERATION =  0x0506;

void ArmPlayActiveTexture(ArmPlayenum texture);
void ArmPlayAttachShader(ArmPlayuint program, ArmPlayuint shader);
void ArmPlayBindAttribLocation(ArmPlayuint program, ArmPlayuint index, const(ArmPlaychar)* name);
void ArmPlayBindBuffer(ArmPlayenum target, ArmPlayuint buffer);
void ArmPlayBindFramebuffer(ArmPlayenum target, ArmPlayuint framebuffer);
void ArmPlayBindRenderbuffer(ArmPlayenum target, ArmPlayuint renderbuffer);
void ArmPlayBindTexture(ArmPlayenum target, ArmPlayuint texture);
void ArmPlayBlendColor(ArmPlayclampf red, ArmPlayclampf green, ArmPlayclampf blue, ArmPlayclampf alpha);
void ArmPlayBlendEquation(ArmPlayenum mode);
void ArmPlayBlendEquationSeparate(ArmPlayenum modeRGB, ArmPlayenum modeAlpha);
void ArmPlayBlendFunc(ArmPlayenum sfactor, ArmPlayenum dfactor);
void ArmPlayBlendFuncSeparate(ArmPlayenum srcRGB, ArmPlayenum dstRGB, ArmPlayenum srcAlpha, ArmPlayenum dstAlpha);
void ArmPlayBufferData(ArmPlayenum target, ArmPlaysizeiptr size, const(ArmPlayvoid)* data, ArmPlayenum usage);
void ArmPlayBufferSubData(ArmPlayenum target, ArmPlayintptr offset, ArmPlaysizeiptr size, const(ArmPlayvoid)* data);
ArmPlayenum ArmPlayCheckFramebufferStatus(ArmPlayenum target);
void ArmPlayClear(ArmPlaybitfield mask);
void ArmPlayClearColor(ArmPlayclampf red, ArmPlayclampf green, ArmPlayclampf blue, ArmPlayclampf alpha);
void ArmPlayClearDepthf(ArmPlayclampf depth);
void ArmPlayClearStencil(ArmPlayint s);
void ArmPlayColorMask(ArmPlayboolean red, ArmPlayboolean green, ArmPlayboolean blue, ArmPlayboolean alpha);
void ArmPlayCompileShader(ArmPlayuint shader);
void ArmPlayCompressedTexImage2D(ArmPlayenum target, ArmPlayint level, ArmPlayenum internalformat, ArmPlaysizei width, ArmPlaysizei height, ArmPlayint border, ArmPlaysizei imageSize, const(ArmPlayvoid)* data);
void ArmPlayCompressedTexSubImage2D(ArmPlayenum target, ArmPlayint level, ArmPlayint xoffset, ArmPlayint yoffset, ArmPlaysizei width, ArmPlaysizei height, ArmPlayenum format, ArmPlaysizei imageSize, const(ArmPlayvoid)* data);
void ArmPlayCopyTexImage2D(ArmPlayenum target, ArmPlayint level, ArmPlayenum internalformat, ArmPlayint x, ArmPlayint y, ArmPlaysizei width, ArmPlaysizei height, ArmPlayint border);
void ArmPlayCopyTexSubImage2D(ArmPlayenum target, ArmPlayint level, ArmPlayint xoffset, ArmPlayint yoffset, ArmPlayint x, ArmPlayint y, ArmPlaysizei width, ArmPlaysizei height);
ArmPlayuint ArmPlayCreateProgram();
ArmPlayuint ArmPlayCreateShader(ArmPlayenum type);
void ArmPlayCullFace(ArmPlayenum mode);
void ArmPlayDeleteBuffers(ArmPlaysizei n, const(ArmPlayuint)* buffers);
void ArmPlayDeleteFramebuffers(ArmPlaysizei n, const(ArmPlayuint)* framebuffers);
void ArmPlayDeleteProgram(ArmPlayuint program);
void ArmPlayDeleteRenderbuffers(ArmPlaysizei n, const(ArmPlayuint)* renderbuffers);
void ArmPlayDeleteShader(ArmPlayuint shader);
void ArmPlayDeleteTextures(ArmPlaysizei n, const(ArmPlayuint)* textures);
void ArmPlayDepthFunc(ArmPlayenum func);
void ArmPlayDepthMask(ArmPlayboolean flag);
void ArmPlayDepthRangef(ArmPlayclampf zNear, ArmPlayclampf zFar);
void ArmPlayDetachShader(ArmPlayuint program, ArmPlayuint shader);
void ArmPlayDisable(ArmPlayenum cap);
void ArmPlayDisableVertexAttribArray(ArmPlayuint index);
void ArmPlayDrawArrays(ArmPlayenum mode, ArmPlayint first, ArmPlaysizei count);
void ArmPlayDrawElements(ArmPlayenum mode, ArmPlaysizei count, ArmPlayenum type, const(ArmPlayvoid)* indices);
void ArmPlayEnable(ArmPlayenum cap);
void ArmPlayEnableVertexAttribArray(ArmPlayuint index);
void ArmPlayFinish();
void ArmPlayFlush();
void ArmPlayFramebufferRenderbuffer(ArmPlayenum target, ArmPlayenum attachment, ArmPlayenum renderbuffertarget, ArmPlayuint renderbuffer);
void ArmPlayFramebufferTexture2D(ArmPlayenum target, ArmPlayenum attachment, ArmPlayenum textarget, ArmPlayuint texture, ArmPlayint level);
void ArmPlayFrontFace(ArmPlayenum mode);
void ArmPlayGenBuffers(ArmPlaysizei n, ArmPlayuint* buffers);
void ArmPlayGenerateMipmap(ArmPlayenum target);
void ArmPlayGenFramebuffers(ArmPlaysizei n, ArmPlayuint* framebuffers);
void ArmPlayGenRenderbuffers(ArmPlaysizei n, ArmPlayuint* renderbuffers);
void ArmPlayGenTextures(ArmPlaysizei n, ArmPlayuint* textures);
void ArmPlayGetActiveAttrib(ArmPlayuint program, ArmPlayuint index, ArmPlaysizei bufsize, ArmPlaysizei* length, ArmPlayint* size, ArmPlayenum* type, ArmPlaychar* name);
void ArmPlayGetActiveUniform(ArmPlayuint program, ArmPlayuint index, ArmPlaysizei bufsize, ArmPlaysizei* length, ArmPlayint* size, ArmPlayenum* type, ArmPlaychar* name);
void ArmPlayGetAttachedShaders(ArmPlayuint program, ArmPlaysizei maxcount, ArmPlaysizei* count, ArmPlayuint* shaders);
ArmPlayint ArmPlayGetAttribLocation(ArmPlayuint program, const(ArmPlaychar)* name);
void ArmPlayGetBooleanv(ArmPlayenum pname, ArmPlayboolean* params);
void ArmPlayGetBufferParameteriv(ArmPlayenum target, ArmPlayenum pname, ArmPlayint* params);
ArmPlayenum ArmPlayGetError();
void ArmPlayGetFloatv(ArmPlayenum pname, ArmPlayfloat* params);
void ArmPlayGetFramebufferAttachmentParameteriv(ArmPlayenum target, ArmPlayenum attachment, ArmPlayenum pname, ArmPlayint* params);
void ArmPlayGetIntegerv(ArmPlayenum pname, ArmPlayint* params);
void ArmPlayGetProgramiv(ArmPlayuint program, ArmPlayenum pname, ArmPlayint* params);
void ArmPlayGetProgramInfoLog(ArmPlayuint program, ArmPlaysizei bufsize, ArmPlaysizei* length, ArmPlaychar* infolog);
void ArmPlayGetRenderbufferParameteriv(ArmPlayenum target, ArmPlayenum pname, ArmPlayint* params);
void ArmPlayGetShaderiv(ArmPlayuint shader, ArmPlayenum pname, ArmPlayint* params);
void ArmPlayGetShaderInfoLog(ArmPlayuint shader, ArmPlaysizei bufsize, ArmPlaysizei* length, ArmPlaychar* infolog);
void ArmPlayGetShaderPrecisionFormat(ArmPlayenum shadertype, ArmPlayenum precisiontype, ArmPlayint* range, ArmPlayint* precision);
void ArmPlayGetShaderSource(ArmPlayuint shader, ArmPlaysizei bufsize, ArmPlaysizei* length, ArmPlaychar* source);
const(ArmPlayubyte)* ArmPlayGetString(ArmPlayenum name);
void ArmPlayGetTexParameterfv(ArmPlayenum target, ArmPlayenum pname, ArmPlayfloat* params);
void ArmPlayGetTexParameteriv(ArmPlayenum target, ArmPlayenum pname, ArmPlayint* params);
void ArmPlayGetUniformfv(ArmPlayuint program, ArmPlayint location, ArmPlayfloat* params);
void ArmPlayGetUniformiv(ArmPlayuint program, ArmPlayint location, ArmPlayint* params);
ArmPlayint ArmPlayGetUniformLocation(ArmPlayuint program, const(ArmPlaychar)* name);
void ArmPlayGetVertexAttribfv(ArmPlayuint index, ArmPlayenum pname, ArmPlayfloat* params);
void ArmPlayGetVertexAttribiv(ArmPlayuint index, ArmPlayenum pname, ArmPlayint* params);
void ArmPlayGetVertexAttribPointerv(ArmPlayuint index, ArmPlayenum pname, ArmPlayvoid** pointer);
void ArmPlayHint(ArmPlayenum target, ArmPlayenum mode);
ArmPlayboolean ArmPlayIsBuffer(ArmPlayuint buffer);
ArmPlayboolean ArmPlayIsEnabled(ArmPlayenum cap);
ArmPlayboolean ArmPlayIsFramebuffer(ArmPlayuint framebuffer);
ArmPlayboolean ArmPlayIsProgram(ArmPlayuint program);
ArmPlayboolean ArmPlayIsRenderbuffer(ArmPlayuint renderbuffer);
ArmPlayboolean ArmPlayIsShader(ArmPlayuint shader);
ArmPlayboolean ArmPlayIsTexture(ArmPlayuint texture);
void ArmPlayLineWidth(ArmPlayfloat width);
void ArmPlayLinkProgram(ArmPlayuint program);
void ArmPlayPixelStorei(ArmPlayenum pname, ArmPlayint param);
void ArmPlayPolygonOffset(ArmPlayfloat factor, ArmPlayfloat units);
void ArmPlayReadPixels(ArmPlayint x, ArmPlayint y, ArmPlaysizei width, ArmPlaysizei height, ArmPlayenum format, ArmPlayenum type, ArmPlayvoid* pixels);
void ArmPlayReleaseShaderCompiler();
void ArmPlayRenderbufferStorage(ArmPlayenum target, ArmPlayenum internalformat, ArmPlaysizei width, ArmPlaysizei height);
void ArmPlaySampleCoverage(ArmPlayclampf value, ArmPlayboolean invert);
void ArmPlayScissor(ArmPlayint x, ArmPlayint y, ArmPlaysizei width, ArmPlaysizei height);
void ArmPlayShaderBinary(ArmPlaysizei n, const(ArmPlayuint)* shaders, ArmPlayenum binaryformat, const(ArmPlayvoid)* binary, ArmPlaysizei length);
void ArmPlayShaderSource(ArmPlayuint shader, ArmPlaysizei count, in ArmPlaychar** string, const(ArmPlayint)* length);
void ArmPlayStencilFunc(ArmPlayenum func, ArmPlayint ref_, ArmPlayuint mask);
void ArmPlayStencilFuncSeparate(ArmPlayenum face, ArmPlayenum func, ArmPlayint ref_, ArmPlayuint mask);
void ArmPlayStencilMask(ArmPlayuint mask);
void ArmPlayStencilMaskSeparate(ArmPlayenum face, ArmPlayuint mask);
void ArmPlayStencilOp(ArmPlayenum fail, ArmPlayenum zfail, ArmPlayenum zpass);
void ArmPlayStencilOpSeparate(ArmPlayenum face, ArmPlayenum fail, ArmPlayenum zfail, ArmPlayenum zpass);
void ArmPlayTexImage2D(ArmPlayenum target, ArmPlayint level, ArmPlayint internalformat, ArmPlaysizei width, ArmPlaysizei height, ArmPlayint border, ArmPlayenum format, ArmPlayenum type, const(ArmPlayvoid)* pixels);
void ArmPlayTexParameterf(ArmPlayenum target, ArmPlayenum pname, ArmPlayfloat param);
void ArmPlayTexParameterfv(ArmPlayenum target, ArmPlayenum pname, const(ArmPlayfloat)* params);
void ArmPlayTexParameteri(ArmPlayenum target, ArmPlayenum pname, ArmPlayint param);
void ArmPlayTexParameteriv(ArmPlayenum target, ArmPlayenum pname, const(ArmPlayint)* params);
void ArmPlayTexSubImage2D(ArmPlayenum target, ArmPlayint level, ArmPlayint xoffset, ArmPlayint yoffset, ArmPlaysizei width, ArmPlaysizei height, ArmPlayenum format, ArmPlayenum type, const(ArmPlayvoid)* pixels);
void ArmPlayUniform1f(ArmPlayint location, ArmPlayfloat x);
void ArmPlayUniform1fv(ArmPlayint location, ArmPlaysizei count, const(ArmPlayfloat)* v);
void ArmPlayUniform1i(ArmPlayint location, ArmPlayint x);
void ArmPlayUniform1iv(ArmPlayint location, ArmPlaysizei count, const(ArmPlayint)* v);
void ArmPlayUniform2f(ArmPlayint location, ArmPlayfloat x, ArmPlayfloat y);
void ArmPlayUniform2fv(ArmPlayint location, ArmPlaysizei count, const(ArmPlayfloat)* v);
void ArmPlayUniform2i(ArmPlayint location, ArmPlayint x, ArmPlayint y);
void ArmPlayUniform2iv(ArmPlayint location, ArmPlaysizei count, const(ArmPlayint)* v);
void ArmPlayUniform3f(ArmPlayint location, ArmPlayfloat x, ArmPlayfloat y, ArmPlayfloat z);
void ArmPlayUniform3fv(ArmPlayint location, ArmPlaysizei count, const(ArmPlayfloat)* v);
void ArmPlayUniform3i(ArmPlayint location, ArmPlayint x, ArmPlayint y, ArmPlayint z);
void ArmPlayUniform3iv(ArmPlayint location, ArmPlaysizei count, const(ArmPlayint)* v);
void ArmPlayUniform4f(ArmPlayint location, ArmPlayfloat x, ArmPlayfloat y, ArmPlayfloat z, ArmPlayfloat w);
void ArmPlayUniform4fv(ArmPlayint location, ArmPlaysizei count, const(ArmPlayfloat)* v);
void ArmPlayUniform4i(ArmPlayint location, ArmPlayint x, ArmPlayint y, ArmPlayint z, ArmPlayint w);
void ArmPlayUniform4iv(ArmPlayint location, ArmPlaysizei count, const(ArmPlayint)* v);
void ArmPlayUniformMatrix2fv(ArmPlayint location, ArmPlaysizei count, ArmPlayboolean transpose, const(ArmPlayfloat)* value);
void ArmPlayUniformMatrix3fv(ArmPlayint location, ArmPlaysizei count, ArmPlayboolean transpose, const(ArmPlayfloat)* value);
void ArmPlayUniformMatrix4fv(ArmPlayint location, ArmPlaysizei count, ArmPlayboolean transpose, const(ArmPlayfloat)* value);
void ArmPlayUseProgram(ArmPlayuint program);
void ArmPlayValidateProgram(ArmPlayuint program);
void ArmPlayVertexAttrib1f(ArmPlayuint indx, ArmPlayfloat x);
void ArmPlayVertexAttrib1fv(ArmPlayuint indx, const(ArmPlayfloat)* values);
void ArmPlayVertexAttrib2f(ArmPlayuint indx, ArmPlayfloat x, ArmPlayfloat y);
void ArmPlayVertexAttrib2fv(ArmPlayuint indx, const(ArmPlayfloat)* values);
void ArmPlayVertexAttrib3f(ArmPlayuint indx, ArmPlayfloat x, ArmPlayfloat y, ArmPlayfloat z);
void ArmPlayVertexAttrib3fv(ArmPlayuint indx, const(ArmPlayfloat)* values);
void ArmPlayVertexAttrib4f(ArmPlayuint indx, ArmPlayfloat x, ArmPlayfloat y, ArmPlayfloat z, ArmPlayfloat w);
void ArmPlayVertexAttrib4fv(ArmPlayuint indx, const(ArmPlayfloat)* values);
void ArmPlayVertexAttribPointer(ArmPlayuint indx, ArmPlayint size, ArmPlayenum type, ArmPlayboolean normalized, ArmPlaysizei stride, const(ArmPlayvoid)* ptr);

